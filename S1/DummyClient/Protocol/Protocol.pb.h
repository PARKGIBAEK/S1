// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Protocol_2eproto;
namespace Protocol {
class CHAT_ACK;
struct CHAT_ACKDefaultTypeInternal;
extern CHAT_ACKDefaultTypeInternal _CHAT_ACK_default_instance_;
class CHAT_REQ;
struct CHAT_REQDefaultTypeInternal;
extern CHAT_REQDefaultTypeInternal _CHAT_REQ_default_instance_;
class CREATE_CHARACTER_ACK;
struct CREATE_CHARACTER_ACKDefaultTypeInternal;
extern CREATE_CHARACTER_ACKDefaultTypeInternal _CREATE_CHARACTER_ACK_default_instance_;
class CREATE_CHARACTER_REQ;
struct CREATE_CHARACTER_REQDefaultTypeInternal;
extern CREATE_CHARACTER_REQDefaultTypeInternal _CREATE_CHARACTER_REQ_default_instance_;
class ENTER_GAME_ACK;
struct ENTER_GAME_ACKDefaultTypeInternal;
extern ENTER_GAME_ACKDefaultTypeInternal _ENTER_GAME_ACK_default_instance_;
class ENTER_GAME_REQ;
struct ENTER_GAME_REQDefaultTypeInternal;
extern ENTER_GAME_REQDefaultTypeInternal _ENTER_GAME_REQ_default_instance_;
class LOGIN_ACK;
struct LOGIN_ACKDefaultTypeInternal;
extern LOGIN_ACKDefaultTypeInternal _LOGIN_ACK_default_instance_;
class LOGIN_REQ;
struct LOGIN_REQDefaultTypeInternal;
extern LOGIN_REQDefaultTypeInternal _LOGIN_REQ_default_instance_;
class SIGNUP_ACK;
struct SIGNUP_ACKDefaultTypeInternal;
extern SIGNUP_ACKDefaultTypeInternal _SIGNUP_ACK_default_instance_;
class SIGNUP_REQ;
struct SIGNUP_REQDefaultTypeInternal;
extern SIGNUP_REQDefaultTypeInternal _SIGNUP_REQ_default_instance_;
}  // namespace Protocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Protocol {

// ===================================================================


// -------------------------------------------------------------------

class SIGNUP_REQ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.SIGNUP_REQ) */ {
 public:
  inline SIGNUP_REQ() : SIGNUP_REQ(nullptr) {}
  ~SIGNUP_REQ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SIGNUP_REQ(::google::protobuf::internal::ConstantInitialized);

  inline SIGNUP_REQ(const SIGNUP_REQ& from)
      : SIGNUP_REQ(nullptr, from) {}
  SIGNUP_REQ(SIGNUP_REQ&& from) noexcept
    : SIGNUP_REQ() {
    *this = ::std::move(from);
  }

  inline SIGNUP_REQ& operator=(const SIGNUP_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIGNUP_REQ& operator=(SIGNUP_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIGNUP_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIGNUP_REQ* internal_default_instance() {
    return reinterpret_cast<const SIGNUP_REQ*>(
               &_SIGNUP_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SIGNUP_REQ& a, SIGNUP_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(SIGNUP_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIGNUP_REQ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIGNUP_REQ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIGNUP_REQ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SIGNUP_REQ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SIGNUP_REQ& from) {
    SIGNUP_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SIGNUP_REQ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.SIGNUP_REQ";
  }
  protected:
  explicit SIGNUP_REQ(::google::protobuf::Arena* arena);
  SIGNUP_REQ(::google::protobuf::Arena* arena, const SIGNUP_REQ& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.SIGNUP_REQ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SIGNUP_ACK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.SIGNUP_ACK) */ {
 public:
  inline SIGNUP_ACK() : SIGNUP_ACK(nullptr) {}
  ~SIGNUP_ACK() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SIGNUP_ACK(::google::protobuf::internal::ConstantInitialized);

  inline SIGNUP_ACK(const SIGNUP_ACK& from)
      : SIGNUP_ACK(nullptr, from) {}
  SIGNUP_ACK(SIGNUP_ACK&& from) noexcept
    : SIGNUP_ACK() {
    *this = ::std::move(from);
  }

  inline SIGNUP_ACK& operator=(const SIGNUP_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SIGNUP_ACK& operator=(SIGNUP_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SIGNUP_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const SIGNUP_ACK* internal_default_instance() {
    return reinterpret_cast<const SIGNUP_ACK*>(
               &_SIGNUP_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SIGNUP_ACK& a, SIGNUP_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(SIGNUP_ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SIGNUP_ACK* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SIGNUP_ACK* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SIGNUP_ACK>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SIGNUP_ACK& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SIGNUP_ACK& from) {
    SIGNUP_ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SIGNUP_ACK* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.SIGNUP_ACK";
  }
  protected:
  explicit SIGNUP_ACK(::google::protobuf::Arena* arena);
  SIGNUP_ACK(::google::protobuf::Arena* arena, const SIGNUP_ACK& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.SIGNUP_ACK)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class LOGIN_REQ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.LOGIN_REQ) */ {
 public:
  inline LOGIN_REQ() : LOGIN_REQ(nullptr) {}
  ~LOGIN_REQ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LOGIN_REQ(::google::protobuf::internal::ConstantInitialized);

  inline LOGIN_REQ(const LOGIN_REQ& from)
      : LOGIN_REQ(nullptr, from) {}
  LOGIN_REQ(LOGIN_REQ&& from) noexcept
    : LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline LOGIN_REQ& operator=(const LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIN_REQ& operator=(LOGIN_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LOGIN_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const LOGIN_REQ*>(
               &_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LOGIN_REQ& a, LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIN_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOGIN_REQ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LOGIN_REQ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LOGIN_REQ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LOGIN_REQ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LOGIN_REQ& from) {
    LOGIN_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LOGIN_REQ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.LOGIN_REQ";
  }
  protected:
  explicit LOGIN_REQ(::google::protobuf::Arena* arena);
  LOGIN_REQ(::google::protobuf::Arena* arena, const LOGIN_REQ& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string token = 3;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.LOGIN_REQ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class ENTER_GAME_REQ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.ENTER_GAME_REQ) */ {
 public:
  inline ENTER_GAME_REQ() : ENTER_GAME_REQ(nullptr) {}
  ~ENTER_GAME_REQ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ENTER_GAME_REQ(::google::protobuf::internal::ConstantInitialized);

  inline ENTER_GAME_REQ(const ENTER_GAME_REQ& from)
      : ENTER_GAME_REQ(nullptr, from) {}
  ENTER_GAME_REQ(ENTER_GAME_REQ&& from) noexcept
    : ENTER_GAME_REQ() {
    *this = ::std::move(from);
  }

  inline ENTER_GAME_REQ& operator=(const ENTER_GAME_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENTER_GAME_REQ& operator=(ENTER_GAME_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ENTER_GAME_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENTER_GAME_REQ* internal_default_instance() {
    return reinterpret_cast<const ENTER_GAME_REQ*>(
               &_ENTER_GAME_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ENTER_GAME_REQ& a, ENTER_GAME_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ENTER_GAME_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENTER_GAME_REQ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ENTER_GAME_REQ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ENTER_GAME_REQ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ENTER_GAME_REQ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ENTER_GAME_REQ& from) {
    ENTER_GAME_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ENTER_GAME_REQ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.ENTER_GAME_REQ";
  }
  protected:
  explicit ENTER_GAME_REQ(::google::protobuf::Arena* arena);
  ENTER_GAME_REQ(::google::protobuf::Arena* arena, const ENTER_GAME_REQ& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // uint64 playerIndex = 1;
  void clear_playerindex() ;
  ::uint64_t playerindex() const;
  void set_playerindex(::uint64_t value);

  private:
  ::uint64_t _internal_playerindex() const;
  void _internal_set_playerindex(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.ENTER_GAME_REQ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t playerindex_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class ENTER_GAME_ACK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.ENTER_GAME_ACK) */ {
 public:
  inline ENTER_GAME_ACK() : ENTER_GAME_ACK(nullptr) {}
  ~ENTER_GAME_ACK() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ENTER_GAME_ACK(::google::protobuf::internal::ConstantInitialized);

  inline ENTER_GAME_ACK(const ENTER_GAME_ACK& from)
      : ENTER_GAME_ACK(nullptr, from) {}
  ENTER_GAME_ACK(ENTER_GAME_ACK&& from) noexcept
    : ENTER_GAME_ACK() {
    *this = ::std::move(from);
  }

  inline ENTER_GAME_ACK& operator=(const ENTER_GAME_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENTER_GAME_ACK& operator=(ENTER_GAME_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ENTER_GAME_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENTER_GAME_ACK* internal_default_instance() {
    return reinterpret_cast<const ENTER_GAME_ACK*>(
               &_ENTER_GAME_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ENTER_GAME_ACK& a, ENTER_GAME_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(ENTER_GAME_ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENTER_GAME_ACK* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ENTER_GAME_ACK* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ENTER_GAME_ACK>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ENTER_GAME_ACK& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ENTER_GAME_ACK& from) {
    ENTER_GAME_ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ENTER_GAME_ACK* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.ENTER_GAME_ACK";
  }
  protected:
  explicit ENTER_GAME_ACK(::google::protobuf::Arena* arena);
  ENTER_GAME_ACK(::google::protobuf::Arena* arena, const ENTER_GAME_ACK& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.ENTER_GAME_ACK)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CREATE_CHARACTER_REQ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CREATE_CHARACTER_REQ) */ {
 public:
  inline CREATE_CHARACTER_REQ() : CREATE_CHARACTER_REQ(nullptr) {}
  ~CREATE_CHARACTER_REQ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CREATE_CHARACTER_REQ(::google::protobuf::internal::ConstantInitialized);

  inline CREATE_CHARACTER_REQ(const CREATE_CHARACTER_REQ& from)
      : CREATE_CHARACTER_REQ(nullptr, from) {}
  CREATE_CHARACTER_REQ(CREATE_CHARACTER_REQ&& from) noexcept
    : CREATE_CHARACTER_REQ() {
    *this = ::std::move(from);
  }

  inline CREATE_CHARACTER_REQ& operator=(const CREATE_CHARACTER_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CREATE_CHARACTER_REQ& operator=(CREATE_CHARACTER_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CREATE_CHARACTER_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CREATE_CHARACTER_REQ* internal_default_instance() {
    return reinterpret_cast<const CREATE_CHARACTER_REQ*>(
               &_CREATE_CHARACTER_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CREATE_CHARACTER_REQ& a, CREATE_CHARACTER_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CREATE_CHARACTER_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CREATE_CHARACTER_REQ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CREATE_CHARACTER_REQ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CREATE_CHARACTER_REQ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CREATE_CHARACTER_REQ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CREATE_CHARACTER_REQ& from) {
    CREATE_CHARACTER_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CREATE_CHARACTER_REQ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.CREATE_CHARACTER_REQ";
  }
  protected:
  explicit CREATE_CHARACTER_REQ(::google::protobuf::Arena* arena);
  CREATE_CHARACTER_REQ(::google::protobuf::Arena* arena, const CREATE_CHARACTER_REQ& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 1,
  };
  // string characterName = 1;
  void clear_charactername() ;
  const std::string& charactername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_charactername(Arg_&& arg, Args_... args);
  std::string* mutable_charactername();
  PROTOBUF_NODISCARD std::string* release_charactername();
  void set_allocated_charactername(std::string* value);

  private:
  const std::string& _internal_charactername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_charactername(
      const std::string& value);
  std::string* _internal_mutable_charactername();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.CREATE_CHARACTER_REQ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr charactername_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CREATE_CHARACTER_ACK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CREATE_CHARACTER_ACK) */ {
 public:
  inline CREATE_CHARACTER_ACK() : CREATE_CHARACTER_ACK(nullptr) {}
  ~CREATE_CHARACTER_ACK() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CREATE_CHARACTER_ACK(::google::protobuf::internal::ConstantInitialized);

  inline CREATE_CHARACTER_ACK(const CREATE_CHARACTER_ACK& from)
      : CREATE_CHARACTER_ACK(nullptr, from) {}
  CREATE_CHARACTER_ACK(CREATE_CHARACTER_ACK&& from) noexcept
    : CREATE_CHARACTER_ACK() {
    *this = ::std::move(from);
  }

  inline CREATE_CHARACTER_ACK& operator=(const CREATE_CHARACTER_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CREATE_CHARACTER_ACK& operator=(CREATE_CHARACTER_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CREATE_CHARACTER_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const CREATE_CHARACTER_ACK* internal_default_instance() {
    return reinterpret_cast<const CREATE_CHARACTER_ACK*>(
               &_CREATE_CHARACTER_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CREATE_CHARACTER_ACK& a, CREATE_CHARACTER_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(CREATE_CHARACTER_ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CREATE_CHARACTER_ACK* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CREATE_CHARACTER_ACK* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CREATE_CHARACTER_ACK>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CREATE_CHARACTER_ACK& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CREATE_CHARACTER_ACK& from) {
    CREATE_CHARACTER_ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CREATE_CHARACTER_ACK* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.CREATE_CHARACTER_ACK";
  }
  protected:
  explicit CREATE_CHARACTER_ACK(::google::protobuf::Arena* arena);
  CREATE_CHARACTER_ACK(::google::protobuf::Arena* arena, const CREATE_CHARACTER_ACK& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.CREATE_CHARACTER_ACK)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CHAT_REQ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CHAT_REQ) */ {
 public:
  inline CHAT_REQ() : CHAT_REQ(nullptr) {}
  ~CHAT_REQ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CHAT_REQ(::google::protobuf::internal::ConstantInitialized);

  inline CHAT_REQ(const CHAT_REQ& from)
      : CHAT_REQ(nullptr, from) {}
  CHAT_REQ(CHAT_REQ&& from) noexcept
    : CHAT_REQ() {
    *this = ::std::move(from);
  }

  inline CHAT_REQ& operator=(const CHAT_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHAT_REQ& operator=(CHAT_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHAT_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHAT_REQ* internal_default_instance() {
    return reinterpret_cast<const CHAT_REQ*>(
               &_CHAT_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CHAT_REQ& a, CHAT_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CHAT_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHAT_REQ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHAT_REQ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHAT_REQ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CHAT_REQ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CHAT_REQ& from) {
    CHAT_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CHAT_REQ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.CHAT_REQ";
  }
  protected:
  explicit CHAT_REQ(::google::protobuf::Arena* arena);
  CHAT_REQ(::google::protobuf::Arena* arena, const CHAT_REQ& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.CHAT_REQ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      29, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CHAT_ACK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CHAT_ACK) */ {
 public:
  inline CHAT_ACK() : CHAT_ACK(nullptr) {}
  ~CHAT_ACK() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CHAT_ACK(::google::protobuf::internal::ConstantInitialized);

  inline CHAT_ACK(const CHAT_ACK& from)
      : CHAT_ACK(nullptr, from) {}
  CHAT_ACK(CHAT_ACK&& from) noexcept
    : CHAT_ACK() {
    *this = ::std::move(from);
  }

  inline CHAT_ACK& operator=(const CHAT_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHAT_ACK& operator=(CHAT_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHAT_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHAT_ACK* internal_default_instance() {
    return reinterpret_cast<const CHAT_ACK*>(
               &_CHAT_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CHAT_ACK& a, CHAT_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(CHAT_ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHAT_ACK* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHAT_ACK* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHAT_ACK>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CHAT_ACK& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CHAT_ACK& from) {
    CHAT_ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CHAT_ACK* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.CHAT_ACK";
  }
  protected:
  explicit CHAT_ACK(::google::protobuf::Arena* arena);
  CHAT_ACK(::google::protobuf::Arena* arena, const CHAT_ACK& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // uint64 playerId = 1;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.CHAT_ACK)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      29, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::uint64_t playerid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class LOGIN_ACK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.LOGIN_ACK) */ {
 public:
  inline LOGIN_ACK() : LOGIN_ACK(nullptr) {}
  ~LOGIN_ACK() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LOGIN_ACK(::google::protobuf::internal::ConstantInitialized);

  inline LOGIN_ACK(const LOGIN_ACK& from)
      : LOGIN_ACK(nullptr, from) {}
  LOGIN_ACK(LOGIN_ACK&& from) noexcept
    : LOGIN_ACK() {
    *this = ::std::move(from);
  }

  inline LOGIN_ACK& operator=(const LOGIN_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIN_ACK& operator=(LOGIN_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LOGIN_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const LOGIN_ACK* internal_default_instance() {
    return reinterpret_cast<const LOGIN_ACK*>(
               &_LOGIN_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LOGIN_ACK& a, LOGIN_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIN_ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOGIN_ACK* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LOGIN_ACK* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LOGIN_ACK>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LOGIN_ACK& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LOGIN_ACK& from) {
    LOGIN_ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LOGIN_ACK* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.LOGIN_ACK";
  }
  protected:
  explicit LOGIN_ACK(::google::protobuf::Arena* arena);
  LOGIN_ACK(::google::protobuf::Arena* arena, const LOGIN_ACK& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.PlayerInfo players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::Protocol::PlayerInfo* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_players();
  private:
  const ::google::protobuf::RepeatedPtrField<::Protocol::PlayerInfo>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::Protocol::PlayerInfo>* _internal_mutable_players();
  public:
  const ::Protocol::PlayerInfo& players(int index) const;
  ::Protocol::PlayerInfo* add_players();
  const ::google::protobuf::RepeatedPtrField< ::Protocol::PlayerInfo >&
      players() const;
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.LOGIN_ACK)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::Protocol::PlayerInfo > players_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SIGNUP_REQ

// string userId = 1;
inline void SIGNUP_REQ::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& SIGNUP_REQ::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.SIGNUP_REQ.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SIGNUP_REQ::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.SIGNUP_REQ.userId)
}
inline std::string* SIGNUP_REQ::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Protocol.SIGNUP_REQ.userId)
  return _s;
}
inline const std::string& SIGNUP_REQ::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void SIGNUP_REQ::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* SIGNUP_REQ::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* SIGNUP_REQ::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.SIGNUP_REQ.userId)
  return _impl_.userid_.Release();
}
inline void SIGNUP_REQ::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SIGNUP_REQ.userId)
}

// string password = 2;
inline void SIGNUP_REQ::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& SIGNUP_REQ::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.SIGNUP_REQ.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SIGNUP_REQ::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.SIGNUP_REQ.password)
}
inline std::string* SIGNUP_REQ::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.SIGNUP_REQ.password)
  return _s;
}
inline const std::string& SIGNUP_REQ::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void SIGNUP_REQ::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* SIGNUP_REQ::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* SIGNUP_REQ::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.SIGNUP_REQ.password)
  return _impl_.password_.Release();
}
inline void SIGNUP_REQ::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SIGNUP_REQ.password)
}

// string email = 3;
inline void SIGNUP_REQ::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SIGNUP_REQ::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.SIGNUP_REQ.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SIGNUP_REQ::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.SIGNUP_REQ.email)
}
inline std::string* SIGNUP_REQ::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.SIGNUP_REQ.email)
  return _s;
}
inline const std::string& SIGNUP_REQ::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void SIGNUP_REQ::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* SIGNUP_REQ::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* SIGNUP_REQ::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.SIGNUP_REQ.email)
  return _impl_.email_.Release();
}
inline void SIGNUP_REQ::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SIGNUP_REQ.email)
}

// -------------------------------------------------------------------

// SIGNUP_ACK

// bool success = 1;
inline void SIGNUP_ACK::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool SIGNUP_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.SIGNUP_ACK.success)
  return _internal_success();
}
inline void SIGNUP_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.SIGNUP_ACK.success)
}
inline bool SIGNUP_ACK::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void SIGNUP_ACK::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// CREATE_CHARACTER_REQ

// string characterName = 1;
inline void CREATE_CHARACTER_REQ::clear_charactername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.charactername_.ClearToEmpty();
}
inline const std::string& CREATE_CHARACTER_REQ::charactername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.CREATE_CHARACTER_REQ.characterName)
  return _internal_charactername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CREATE_CHARACTER_REQ::set_charactername(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.charactername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.CREATE_CHARACTER_REQ.characterName)
}
inline std::string* CREATE_CHARACTER_REQ::mutable_charactername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_charactername();
  // @@protoc_insertion_point(field_mutable:Protocol.CREATE_CHARACTER_REQ.characterName)
  return _s;
}
inline const std::string& CREATE_CHARACTER_REQ::_internal_charactername() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.charactername_.Get();
}
inline void CREATE_CHARACTER_REQ::_internal_set_charactername(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.charactername_.Set(value, GetArena());
}
inline std::string* CREATE_CHARACTER_REQ::_internal_mutable_charactername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.charactername_.Mutable( GetArena());
}
inline std::string* CREATE_CHARACTER_REQ::release_charactername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.CREATE_CHARACTER_REQ.characterName)
  return _impl_.charactername_.Release();
}
inline void CREATE_CHARACTER_REQ::set_allocated_charactername(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.charactername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.charactername_.IsDefault()) {
          _impl_.charactername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CREATE_CHARACTER_REQ.characterName)
}

// -------------------------------------------------------------------

// CREATE_CHARACTER_ACK

// bool success = 1;
inline void CREATE_CHARACTER_ACK::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool CREATE_CHARACTER_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.CREATE_CHARACTER_ACK.success)
  return _internal_success();
}
inline void CREATE_CHARACTER_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.CREATE_CHARACTER_ACK.success)
}
inline bool CREATE_CHARACTER_ACK::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void CREATE_CHARACTER_ACK::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// LOGIN_REQ

// string userId = 1;
inline void LOGIN_REQ::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& LOGIN_REQ::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.LOGIN_REQ.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LOGIN_REQ::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.LOGIN_REQ.userId)
}
inline std::string* LOGIN_REQ::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Protocol.LOGIN_REQ.userId)
  return _s;
}
inline const std::string& LOGIN_REQ::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void LOGIN_REQ::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* LOGIN_REQ::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* LOGIN_REQ::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.LOGIN_REQ.userId)
  return _impl_.userid_.Release();
}
inline void LOGIN_REQ::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.LOGIN_REQ.userId)
}

// string password = 2;
inline void LOGIN_REQ::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LOGIN_REQ::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.LOGIN_REQ.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LOGIN_REQ::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.LOGIN_REQ.password)
}
inline std::string* LOGIN_REQ::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.LOGIN_REQ.password)
  return _s;
}
inline const std::string& LOGIN_REQ::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void LOGIN_REQ::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* LOGIN_REQ::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* LOGIN_REQ::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.LOGIN_REQ.password)
  return _impl_.password_.Release();
}
inline void LOGIN_REQ::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.LOGIN_REQ.password)
}

// string token = 3;
inline void LOGIN_REQ::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LOGIN_REQ::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.LOGIN_REQ.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LOGIN_REQ::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.LOGIN_REQ.token)
}
inline std::string* LOGIN_REQ::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.LOGIN_REQ.token)
  return _s;
}
inline const std::string& LOGIN_REQ::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void LOGIN_REQ::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* LOGIN_REQ::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* LOGIN_REQ::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.LOGIN_REQ.token)
  return _impl_.token_.Release();
}
inline void LOGIN_REQ::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.LOGIN_REQ.token)
}

// -------------------------------------------------------------------

// LOGIN_ACK

// bool success = 1;
inline void LOGIN_ACK::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool LOGIN_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.LOGIN_ACK.success)
  return _internal_success();
}
inline void LOGIN_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.LOGIN_ACK.success)
}
inline bool LOGIN_ACK::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void LOGIN_ACK::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// repeated .Protocol.PlayerInfo players = 2;
inline int LOGIN_ACK::_internal_players_size() const {
  return _internal_players().size();
}
inline int LOGIN_ACK::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::PlayerInfo* LOGIN_ACK::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Protocol.LOGIN_ACK.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Protocol::PlayerInfo>* LOGIN_ACK::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Protocol.LOGIN_ACK.players)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_players();
}
inline const ::Protocol::PlayerInfo& LOGIN_ACK::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.LOGIN_ACK.players)
  return _internal_players().Get(index);
}
inline ::Protocol::PlayerInfo* LOGIN_ACK::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Protocol::PlayerInfo* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:Protocol.LOGIN_ACK.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Protocol::PlayerInfo>& LOGIN_ACK::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Protocol.LOGIN_ACK.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::Protocol::PlayerInfo>&
LOGIN_ACK::_internal_players() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::Protocol::PlayerInfo>*
LOGIN_ACK::_internal_mutable_players() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.players_;
}

// -------------------------------------------------------------------

// ENTER_GAME_REQ

// uint64 playerIndex = 1;
inline void ENTER_GAME_REQ::clear_playerindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerindex_ = ::uint64_t{0u};
}
inline ::uint64_t ENTER_GAME_REQ::playerindex() const {
  // @@protoc_insertion_point(field_get:Protocol.ENTER_GAME_REQ.playerIndex)
  return _internal_playerindex();
}
inline void ENTER_GAME_REQ::set_playerindex(::uint64_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:Protocol.ENTER_GAME_REQ.playerIndex)
}
inline ::uint64_t ENTER_GAME_REQ::_internal_playerindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerindex_;
}
inline void ENTER_GAME_REQ::_internal_set_playerindex(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerindex_ = value;
}

// -------------------------------------------------------------------

// ENTER_GAME_ACK

// bool success = 1;
inline void ENTER_GAME_ACK::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool ENTER_GAME_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.ENTER_GAME_ACK.success)
  return _internal_success();
}
inline void ENTER_GAME_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.ENTER_GAME_ACK.success)
}
inline bool ENTER_GAME_ACK::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void ENTER_GAME_ACK::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// CHAT_REQ

// string msg = 1;
inline void CHAT_REQ::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& CHAT_REQ::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.CHAT_REQ.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CHAT_REQ::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.CHAT_REQ.msg)
}
inline std::string* CHAT_REQ::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.CHAT_REQ.msg)
  return _s;
}
inline const std::string& CHAT_REQ::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void CHAT_REQ::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* CHAT_REQ::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* CHAT_REQ::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.CHAT_REQ.msg)
  return _impl_.msg_.Release();
}
inline void CHAT_REQ::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CHAT_REQ.msg)
}

// -------------------------------------------------------------------

// CHAT_ACK

// uint64 playerId = 1;
inline void CHAT_ACK::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t CHAT_ACK::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.CHAT_ACK.playerId)
  return _internal_playerid();
}
inline void CHAT_ACK::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.CHAT_ACK.playerId)
}
inline ::uint64_t CHAT_ACK::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void CHAT_ACK::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// string msg = 2;
inline void CHAT_ACK::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& CHAT_ACK::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.CHAT_ACK.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CHAT_ACK::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.CHAT_ACK.msg)
}
inline std::string* CHAT_ACK::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.CHAT_ACK.msg)
  return _s;
}
inline const std::string& CHAT_ACK::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void CHAT_ACK::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* CHAT_ACK::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* CHAT_ACK::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.CHAT_ACK.msg)
  return _impl_.msg_.Release();
}
inline void CHAT_ACK::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CHAT_ACK.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh
