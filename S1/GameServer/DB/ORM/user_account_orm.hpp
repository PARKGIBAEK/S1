
#pragma once

#include <boost/mysql.hpp>
#include <boost/mysql/tcp.hpp>
#include <boost/describe.hpp>
#include <string>
#include <iostream>
#include <format>

using namespace boost::mysql;
using namespace std;

namespace ORM_test {

struct user_account
{
    int32_t id; // int
    string user_id; // varchar(24)
    string user_name; // varchar(32)
    string password; // varchar(64)
    string email; // varchar(100)
    datetime created_at; // timestamp
    datetime updated_at; // timestamp
};

BOOST_DESCRIBE_STRUCT(user_account, (), (id, user_id, user_name, password, email, created_at, updated_at));

class user_account_orm
{
public:
    // SP 호출 선언
    static int insert_into_user_account_user_id_N_user_name_N_password_N_email(tcp_connection* conn, const string& new_user_id, const string& new_user_name, const string& new_password, const string& new_email);
    static results select_id_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_all_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static results select_all_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static int update_user_account_set_id_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& w_email);
    static int update_user_account_set_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_account_set_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_account_set_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_account_set_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_account_set_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_account_set_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_account_set_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_account_set_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_account_set_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_account_set_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_account_set_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& w_user_id);
    static int update_user_account_set_user_id_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& w_email);
    static int update_user_account_set_user_id_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_user_id_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_user_id_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_user_id_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_user_id_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_user_id_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_user_id_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_user_id_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_user_id_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_user_id_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_user_id_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& w_user_id);
    static int update_user_account_set_user_name_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& w_email);
    static int update_user_account_set_user_name_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_name_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_name_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_name_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_name_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_name_where_EQ_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_name_where_LT_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_name_where_LE_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_name_where_GT_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_name_where_GE_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_name_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& w_user_id);
    static int update_user_account_set_password_where_EQ_email(tcp_connection* conn, const string& s_password, const string& w_email);
    static int update_user_account_set_password_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_password_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_password_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_password_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_password_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_password_where_EQ_id(tcp_connection* conn, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_password_where_LT_id(tcp_connection* conn, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_password_where_LE_id(tcp_connection* conn, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_password_where_GT_id(tcp_connection* conn, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_password_where_GE_id(tcp_connection* conn, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_password_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& w_user_id);
    static int update_user_account_set_email_where_EQ_email(tcp_connection* conn, const string& s_email, const string& w_email);
    static int update_user_account_set_email_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_email_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_email_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_email_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_email_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_email_where_EQ_id(tcp_connection* conn, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_email_where_LT_id(tcp_connection* conn, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_email_where_LE_id(tcp_connection* conn, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_email_where_GT_id(tcp_connection* conn, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_email_where_GE_id(tcp_connection* conn, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_email_where_EQ_user_id(tcp_connection* conn, const string& s_email, const string& w_user_id);
    static int update_user_account_set_created_at_where_EQ_email(tcp_connection* conn, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_created_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_created_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_created_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_created_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_created_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_created_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_updated_at_where_EQ_email(tcp_connection* conn, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_email);
    static int update_user_account_set_id_N_user_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& w_email);
    static int update_user_account_set_id_N_user_name_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& w_user_id);
    static int update_user_account_set_id_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& w_email);
    static int update_user_account_set_id_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& w_user_id);
    static int update_user_account_set_id_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& w_email);
    static int update_user_account_set_user_id_N_password_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& w_user_id);
    static int update_user_account_set_user_id_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const string& w_email);
    static int update_user_account_set_user_id_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const string& w_user_id);
    static int update_user_account_set_user_id_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& w_email);
    static int update_user_account_set_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& w_user_id);
    static int update_user_account_set_user_name_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const string& w_email);
    static int update_user_account_set_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const string& w_user_id);
    static int update_user_account_set_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_password_N_email_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_password_N_email_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_password_N_email_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_password_N_email_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int delete_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email);
    static int delete_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
};

// SP 호출 구현

inline int user_account_orm::insert_into_user_account_user_id_N_user_name_N_password_N_email(tcp_connection* conn, const string& new_user_id, const string& new_user_name, const string& new_password, const string& new_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_972(?, ?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_user_name, new_password, new_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline results user_account_orm::select_id_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_973(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_974(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_975(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_976(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_977(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_978(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_979(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_980(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_981(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_982(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_983(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_984(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_985(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_986(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_987(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_988(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_989(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_990(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_991(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_992(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_993(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_994(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_995(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_996(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_997(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_998(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_999(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1000(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1001(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1002(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1003(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1004(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1005(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1006(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1007(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1008(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1009(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1010(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1011(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1012(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1013(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1014(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1015(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1016(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1017(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1018(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1019(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1020(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1021(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1022(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1023(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1024(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1025(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1026(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1027(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1028(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1029(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1030(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1031(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1032(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1033(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1034(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1035(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1036(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1037(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1038(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1039(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1040(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1041(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1042(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1043(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1044(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1045(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1046(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1047(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1048(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1049(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1050(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1051(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1052(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1053(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1054(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1055(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1056(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1057(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1058(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1059(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1060(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1061(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1062(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1063(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1064(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1065(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1066(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1067(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1068(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1069(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1070(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1071(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1072(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1073(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1074(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1075(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1076(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1077(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1078(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1079(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1080(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1081(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1082(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1083(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1084(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1085(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1086(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1087(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1088(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1089(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1090(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1091(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1092(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1093(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1094(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1095(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1096(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1097(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1098(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1099(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1100(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1101(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1102(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1103(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1104(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1105(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1106(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1107(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1108(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1109(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1110(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1111(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1112(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1113(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1114(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1115(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1116(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1117(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1118(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1119(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1120(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1121(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1122(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1123(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1124(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1125(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1126(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1127(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1128(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1129(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1130(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1131(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1132(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1133(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1134(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1135(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1136(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1137(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1138(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1139(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1140(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1141(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1142(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1143(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1144(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1145(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1146(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1147(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1148(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1149(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1150(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1151(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1152(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1153(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1154(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1155(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1156(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1157(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1158(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1159(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1160(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1161(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1162(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1163(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1164(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1165(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1166(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1167(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1168(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1169(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1170(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1171(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1172(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1173(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1174(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1175(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1176(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1177(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1178(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1179(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1180(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1181(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1182(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1183(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1184(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1185(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1186(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1187(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1188(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1189(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1190(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1191(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1192(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1193(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1194(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1195(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1196(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1197(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1198(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1199(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1200(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1201(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1202(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1203(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1204(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1205(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1206(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1207(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1208(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1209(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1210(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1211(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1212(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1213(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1214(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1215(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1216(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1217(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1218(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1219(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1220(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1221(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1222(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1223(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1224(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1225(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1226(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1227(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1228(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1229(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1230(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1231(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1232(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1233(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1234(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1235(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1236(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1237(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1238(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1239(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1240(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1241(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1242(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1243(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1244(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1245(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1246(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1247(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1248(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1249(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1250(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1251(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1252(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1253(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1254(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1255(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1256(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1257(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1258(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1259(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1260(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1261(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1262(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1263(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1264(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1265(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1266(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1267(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1268(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1269(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1270(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1271(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1272(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1273(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1274(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1275(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1276(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1277(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1278(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1279(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1280(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1281(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1282(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1283(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1284(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1285(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1286(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1287(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1288(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1289(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1290(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1291(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1292(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1293(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1294(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1295(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1296(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1297(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1298(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1299(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1300(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1301(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1302(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1303(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1304(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1305(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1306(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1307(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1308(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1309(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1310(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1311(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1312(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1313(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1314(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1315(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1316(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1317(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1318(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1319(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1320(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1321(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1322(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1323(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1324(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1325(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1326(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1327(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1328(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1329(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1330(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1331(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1332(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1333(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1334(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1335(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1336(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1337(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1338(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1339(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1340(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1341(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1342(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1343(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1344(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1345(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1346(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1347(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1348(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1349(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1350(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1351(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1352(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1353(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1354(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1355(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1356(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1357(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1358(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1359(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1360(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1361(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1362(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1363(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1364(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1365(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1366(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1367(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1368(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1369(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1370(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1371(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1372(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1373(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1374(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1375(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1376(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1377(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1378(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1379(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1380(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1381(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1382(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1383(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1384(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1385(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1386(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1387(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1388(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1389(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1390(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1391(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1392(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1393(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1394(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1395(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1396(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1397(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1398(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1399(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1400(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1401(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1402(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1403(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1404(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1405(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1406(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1407(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1408(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1409(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1410(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1411(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1412(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1413(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1414(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1415(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1416(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1417(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1418(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1419(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1420(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1421(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1422(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1423(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1424(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1425(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1426(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1427(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1428(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1429(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1430(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1431(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1432(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1433(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1434(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1435(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1436(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1437(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1438(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1439(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1440(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1441(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1442(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1443(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1444(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1445(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1446(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1447(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1448(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1449(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1450(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1451(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1452(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1453(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1454(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1455(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1456(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1457(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1458(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1459(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1460(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1461(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1462(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1463(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1464(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1465(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1466(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1467(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1468(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1469(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1470(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1471(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1472(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1473(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1474(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1475(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1476(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1477(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1478(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1479(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1480(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1481(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1482(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1483(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1484(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1485(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1486(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1487(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1488(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1489(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1490(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1491(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1492(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1493(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1494(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1495(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1496(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1497(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1498(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1499(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1500(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1501(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1502(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1503(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1504(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1505(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1506(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1507(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1508(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1509(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1510(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1511(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1512(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1513(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1514(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1515(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1516(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1517(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1518(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1519(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1520(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1521(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1522(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1523(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1524(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1525(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1526(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1527(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1528(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1529(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1530(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1531(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1532(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1533(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1534(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1535(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1536(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1537(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1538(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1539(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1540(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1541(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1542(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1543(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1544(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1545(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1546(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1547(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1548(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1549(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1550(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1551(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1552(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1553(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1554(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1555(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1556(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1557(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1558(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1559(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1560(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1561(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1562(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1563(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1564(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1565(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1566(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1567(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1568(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1569(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1570(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1571(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1572(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1573(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1574(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1575(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1576(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1577(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1578(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1579(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1580(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1581(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1582(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1583(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1584(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1585(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1586(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1587(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1588(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1589(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1590(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1591(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1592(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1593(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1594(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1595(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1596(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1597(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1598(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1599(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1600(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1601(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1602(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1603(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1604(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1605(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1606(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1607(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1608(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1609(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1610(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1611(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1612(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1613(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1614(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1615(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1616(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1617(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1618(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1619(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1620(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1621(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1622(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1623(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1624(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1625(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1626(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1627(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1628(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1629(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1630(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1631(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1632(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1633(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1634(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1635(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1636(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1637(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1638(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1639(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1640(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1641(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1642(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1643(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1644(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1645(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1646(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1647(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1648(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1649(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1650(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1651(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1652(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1653(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1654(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1655(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1656(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1657(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1658(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1659(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1660(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1661(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1662(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1663(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1664(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1665(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1666(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1667(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1668(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1669(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1670(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1671(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1672(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1673(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1674(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1675(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1676(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1677(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1678(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1679(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1680(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1681(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1682(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1683(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1684(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1685(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1686(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1687(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1688(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1689(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1690(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1691(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1692(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1693(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1694(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1695(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1696(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1697(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1698(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1699(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1700(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1701(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1702(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1703(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1704(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1705(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1706(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1707(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1708(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1709(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1710(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1711(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1712(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1713(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1714(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1715(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1716(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1717(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1718(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1719(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1720(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1721(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1722(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1723(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1724(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1725(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1726(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1727(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1728(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1729(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1730(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1731(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1732(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1733(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1734(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1735(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1736(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1737(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1738(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1739(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1740(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1741(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1742(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1743(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1744(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1745(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1746(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1747(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1748(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1749(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1750(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1751(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1752(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1753(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1754(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1755(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1756(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1757(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1758(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1759(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1760(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1761(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1762(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1763(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1764(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1765(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1766(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1767(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1768(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1769(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1770(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1771(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1772(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1773(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1774(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1775(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1776(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1777(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1778(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1779(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1780(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1781(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1782(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1783(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1784(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1785(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1786(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1787(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1788(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1789(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1790(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1791(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1792(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1793(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1794(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1795(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1796(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1797(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1798(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1799(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1800(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1801(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1802(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1803(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1804(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1805(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1806(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1807(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1808(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1809(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1810(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1811(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1812(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1813(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1814(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1815(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1816(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1817(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1818(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1819(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1820(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1821(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1822(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1823(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1824(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1825(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1826(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1827(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1828(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1829(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1830(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1831(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1832(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1833(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1834(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1835(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1836(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1837(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1838(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1839(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1840(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1841(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1842(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1843(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1844(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1845(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1846(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1847(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1848(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1849(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1850(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1851(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1852(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1853(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1854(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1855(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1856(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1857(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1858(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1859(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1860(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1861(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1862(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1863(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1864(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1865(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1866(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1867(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1868(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1869(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1870(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1871(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1872(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1873(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1874(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1875(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1876(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1877(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1878(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1879(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1880(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1881(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1882(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1883(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1884(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1885(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1886(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1887(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1888(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1889(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1890(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1891(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1892(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1893(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1894(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1895(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1896(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1897(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1898(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1899(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1900(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1901(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1902(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1903(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1904(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1905(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1906(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1907(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1908(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1909(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1910(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1911(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1912(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1913(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1914(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1915(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1916(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1917(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1918(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1919(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1920(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1921(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1922(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1923(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1924(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1925(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1926(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1927(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1928(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1929(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1930(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1931(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1932(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1933(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1934(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1935(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1936(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1937(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1938(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1939(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1940(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1941(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1942(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1943(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1944(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1945(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1946(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1947(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1948(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1949(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1950(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1951(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1952(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1953(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1954(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1955(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1956(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1957(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1958(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1959(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1960(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1961(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1962(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1963(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1964(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1965(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1966(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1967(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1968(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1969(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1970(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1971(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1972(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1973(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1974(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1975(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1976(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1977(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1978(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1979(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1980(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1981(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1982(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1983(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1984(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1985(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1986(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1987(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1988(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1989(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1990(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1991(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1992(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1993(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1994(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1995(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1996(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1997(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1998(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_1999(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2000(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2001(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2002(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2003(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2004(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2005(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2006(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2007(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2008(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2009(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2010(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2011(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2012(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2013(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2014(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2015(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2016(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2017(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2018(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2019(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2020(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2021(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2022(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2023(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2024(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2025(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2026(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2027(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2028(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2029(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2030(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2031(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2032(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2033(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2034(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2035(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2036(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2037(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2038(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2039(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2040(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2041(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2042(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2043(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2044(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2045(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2046(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2047(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2048(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2049(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2050(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2051(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2052(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2053(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2054(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2055(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2056(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2057(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2058(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2059(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2060(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2061(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2062(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2063(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2064(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2065(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2066(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2067(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2068(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2069(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2070(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2071(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2072(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2073(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2074(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2075(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2076(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2077(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2078(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2079(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2080(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2081(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2082(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2083(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2084(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2085(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2086(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2087(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2088(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2089(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2090(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2091(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2092(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2093(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2094(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2095(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2096(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2097(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2098(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2099(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2100(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2101(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2102(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2103(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2104(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2105(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2106(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2107(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2108(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2109(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2110(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2111(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2112(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2113(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2114(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2115(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2116(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2117(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2118(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2119(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2120(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2121(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2122(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2123(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2124(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2125(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2126(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2127(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2128(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2129(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2130(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2131(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2132(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2133(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2134(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2135(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2136(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2137(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2138(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2139(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2140(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2141(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2142(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2143(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2144(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2145(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2146(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2147(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2148(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2149(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2150(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2151(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2152(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2153(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2154(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2155(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2156(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2157(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2158(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2159(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2160(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2161(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2162(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2163(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2164(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2165(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2166(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2167(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2168(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2169(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2170(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2171(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2172(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2173(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2174(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2175(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2176(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2177(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2178(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2179(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2180(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2181(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2182(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2183(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2184(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2185(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2186(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2187(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2188(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2189(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2190(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2191(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2192(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2193(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2194(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2195(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2196(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2197(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2198(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2199(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2200(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2201(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2202(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2203(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2204(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2205(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2206(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2207(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2208(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2209(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2210(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2211(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2212(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2213(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2214(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2215(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2216(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2217(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2218(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2219(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2220(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2221(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2222(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2223(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2224(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2225(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2226(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2227(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2228(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2229(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2230(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2231(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2232(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2233(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2234(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2235(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2236(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2237(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2238(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2239(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2240(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2241(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2242(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2243(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2244(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2245(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2246(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2247(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2248(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2249(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2250(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2251(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2252(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2253(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2254(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2255(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2256(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2257(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2258(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2259(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2260(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2261(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2262(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2263(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2264(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2265(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2266(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2267(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2268(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2269(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2270(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2271(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2272(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2273(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2274(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2275(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2276(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2277(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2278(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2279(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2280(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2281(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2282(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2283(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2284(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2285(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2286(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2287(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2288(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2289(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2290(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2291(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2292(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2293(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2294(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2295(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2296(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2297(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2298(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2299(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2300(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2301(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2302(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2303(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2304(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2305(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2306(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2307(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2308(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2309(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2310(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2311(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2312(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2313(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2314(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2315(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2316(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2317(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2318(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2319(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2320(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2321(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2322(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2323(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2324(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2325(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2326(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2327(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2328(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2329(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2330(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2331(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2332(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2333(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2334(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2335(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2336(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2337(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2338(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2339(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2340(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2341(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2342(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2343(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2344(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2345(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2346(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2347(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2348(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2349(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2350(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2351(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2352(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2353(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2354(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2355(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2356(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2357(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2358(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2359(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2360(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2361(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2362(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2363(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2364(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2365(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2366(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2367(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2368(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2369(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2370(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2371(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2372(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2373(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2374(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2375(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2376(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2377(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2378(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2379(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2380(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2381(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2382(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2383(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2384(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2385(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2386(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2387(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2388(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2389(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2390(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2391(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2392(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2393(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2394(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2395(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2396(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2397(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2398(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2399(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2400(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2401(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2402(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2403(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2404(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2405(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2406(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2407(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2408(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2409(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2410(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2411(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_created_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2412(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2413(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2414(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2415(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2416(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2417(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2418(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2419(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2420(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2421(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2422(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2423(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2424(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2425(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2426(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2427(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2428(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2429(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2430(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2431(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2432(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2433(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2434(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2435(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2436(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2437(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2438(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2439(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2440(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2441(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2442(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2443(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2444(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2445(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2446(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2447(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2448(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2449(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2450(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2451(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2452(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2453(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2454(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2455(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2456(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2457(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2458(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2459(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2460(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2461(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2462(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2463(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2464(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2465(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2466(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2467(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2468(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2469(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2470(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2471(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2472(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2473(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2474(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2475(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2476(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2477(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2478(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2479(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2480(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2481(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2482(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2483(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2484(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2485(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2486(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2487(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2488(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2489(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2490(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2491(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2492(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2493(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2494(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2495(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_account_orm::select_all_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2496(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline int user_account_orm::update_user_account_set_id_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2497(?, ?)");
        conn->execute(stmt.bind(s_id, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2498(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2499(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2500(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2501(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2502(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2503(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2504(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2505(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2506(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2507(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2508(?, ?)");
        conn->execute(stmt.bind(s_id, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2509(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2510(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2511(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2512(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2513(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2514(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2515(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2516(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2517(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2518(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2519(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2520(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2521(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2522(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2523(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2524(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2525(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2526(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_EQ_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2527(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_LT_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2528(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_LE_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2529(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_GT_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2530(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_GE_id(tcp_connection* conn, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2531(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2532(?, ?)");
        conn->execute(stmt.bind(s_user_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_EQ_email(tcp_connection* conn, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2533(?, ?)");
        conn->execute(stmt.bind(s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2534(?, ?)");
        conn->execute(stmt.bind(s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2535(?, ?)");
        conn->execute(stmt.bind(s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2536(?, ?)");
        conn->execute(stmt.bind(s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2537(?, ?)");
        conn->execute(stmt.bind(s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2538(?, ?)");
        conn->execute(stmt.bind(s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_EQ_id(tcp_connection* conn, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2539(?, ?)");
        conn->execute(stmt.bind(s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_LT_id(tcp_connection* conn, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2540(?, ?)");
        conn->execute(stmt.bind(s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_LE_id(tcp_connection* conn, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2541(?, ?)");
        conn->execute(stmt.bind(s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_GT_id(tcp_connection* conn, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2542(?, ?)");
        conn->execute(stmt.bind(s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_GE_id(tcp_connection* conn, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2543(?, ?)");
        conn->execute(stmt.bind(s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2544(?, ?)");
        conn->execute(stmt.bind(s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_EQ_email(tcp_connection* conn, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2545(?, ?)");
        conn->execute(stmt.bind(s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2546(?, ?)");
        conn->execute(stmt.bind(s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2547(?, ?)");
        conn->execute(stmt.bind(s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2548(?, ?)");
        conn->execute(stmt.bind(s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2549(?, ?)");
        conn->execute(stmt.bind(s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2550(?, ?)");
        conn->execute(stmt.bind(s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_EQ_id(tcp_connection* conn, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2551(?, ?)");
        conn->execute(stmt.bind(s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_LT_id(tcp_connection* conn, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2552(?, ?)");
        conn->execute(stmt.bind(s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_LE_id(tcp_connection* conn, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2553(?, ?)");
        conn->execute(stmt.bind(s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_GT_id(tcp_connection* conn, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2554(?, ?)");
        conn->execute(stmt.bind(s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_GE_id(tcp_connection* conn, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2555(?, ?)");
        conn->execute(stmt.bind(s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_where_EQ_user_id(tcp_connection* conn, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2556(?, ?)");
        conn->execute(stmt.bind(s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_EQ_email(tcp_connection* conn, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2557(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2558(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2559(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2560(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2561(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2562(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2563(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2564(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2565(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2566(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2567(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2568(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_EQ_email(tcp_connection* conn, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2569(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2570(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2571(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2572(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2573(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2574(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2575(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2576(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2577(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2578(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2579(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2580(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2581(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2582(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2583(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2584(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2585(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2586(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2587(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2588(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2589(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2590(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2591(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2592(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2593(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2594(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2595(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2596(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2597(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2598(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2599(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2600(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2601(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2602(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2603(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2604(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2605(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2606(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2607(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2608(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2609(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2610(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2611(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2612(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2613(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2614(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2615(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2616(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2617(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2618(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2619(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2620(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2621(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2622(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2623(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2624(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2625(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2626(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2627(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2628(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2629(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2630(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2631(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2632(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2633(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2634(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2635(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2636(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2637(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2638(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2639(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2640(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2641(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2642(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2643(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2644(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2645(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2646(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2647(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2648(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2649(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2650(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2651(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2652(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2653(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2654(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2655(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2656(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2657(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2658(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2659(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2660(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2661(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2662(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2663(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2664(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2665(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2666(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2667(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2668(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2669(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2670(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2671(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2672(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2673(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2674(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2675(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2676(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2677(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2678(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2679(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2680(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2681(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2682(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2683(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2684(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2685(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2686(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2687(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2688(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2689(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2690(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2691(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2692(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2693(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2694(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2695(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2696(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2697(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2698(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2699(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2700(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2701(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2702(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2703(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2704(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2705(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2706(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2707(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2708(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2709(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2710(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2711(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2712(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2713(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2714(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2715(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2716(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2717(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2718(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2719(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2720(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2721(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2722(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2723(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2724(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2725(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2726(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2727(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2728(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2729(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2730(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2731(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2732(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2733(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2734(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2735(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2736(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2737(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2738(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2739(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2740(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2741(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2742(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2743(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2744(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2745(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2746(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2747(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2748(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2749(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2750(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2751(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2752(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2753(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2754(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2755(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2756(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2757(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2758(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2759(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2760(?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2761(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2762(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2763(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2764(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2765(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2766(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2767(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2768(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2769(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2770(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2771(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2772(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2773(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2774(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2775(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2776(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2777(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2778(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2779(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2780(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2781(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2782(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2783(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2784(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2785(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2786(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2787(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2788(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2789(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2790(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2791(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2792(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2793(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2794(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2795(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2796(?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2797(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2798(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2799(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2800(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2801(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2802(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2803(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2804(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2805(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2806(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2807(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2808(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2809(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2810(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2811(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2812(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2813(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2814(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2815(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2816(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2817(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2818(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2819(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2820(?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2821(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2822(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2823(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2824(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2825(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2826(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2827(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2828(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2829(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2830(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2831(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2832(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2833(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2834(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2835(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2836(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2837(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2838(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2839(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2840(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2841(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2842(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2843(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2844(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2845(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2846(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2847(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2848(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2849(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2850(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2851(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2852(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2853(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2854(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2855(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2856(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2857(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2858(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2859(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2860(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2861(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2862(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2863(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2864(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2865(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2866(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2867(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2868(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2869(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2870(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2871(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2872(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2873(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2874(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2875(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2876(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2877(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2878(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2879(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2880(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2881(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2882(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2883(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2884(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2885(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2886(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2887(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2888(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2889(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2890(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2891(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2892(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2893(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2894(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2895(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2896(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2897(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2898(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2899(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2900(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2901(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2902(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2903(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2904(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2905(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2906(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2907(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2908(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2909(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2910(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2911(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2912(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2913(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2914(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2915(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2916(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2917(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2918(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2919(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2920(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2921(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2922(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2923(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2924(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2925(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2926(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2927(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2928(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2929(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2930(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2931(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2932(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2933(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2934(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2935(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2936(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2937(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2938(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2939(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2940(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2941(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2942(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2943(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2944(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2945(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2946(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2947(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2948(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2949(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2950(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2951(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2952(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2953(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2954(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2955(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2956(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2957(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2958(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2959(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2960(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2961(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2962(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2963(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2964(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2965(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2966(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2967(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2968(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2969(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2970(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2971(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2972(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2973(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2974(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2975(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2976(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2977(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2978(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2979(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2980(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2981(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2982(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2983(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2984(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2985(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2986(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2987(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2988(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2989(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2990(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2991(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2992(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2993(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2994(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2995(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2996(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2997(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2998(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_2999(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3000(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3001(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3002(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3003(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3004(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3005(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3006(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3007(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3008(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3009(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3010(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3011(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3012(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3013(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3014(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3015(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3016(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3017(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3018(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3019(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3020(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3021(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3022(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3023(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3024(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3025(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3026(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3027(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3028(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3029(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3030(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3031(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3032(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3033(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3034(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3035(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3036(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3037(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3038(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3039(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3040(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3041(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3042(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3043(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3044(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3045(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3046(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3047(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3048(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3049(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3050(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3051(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3052(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3053(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3054(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3055(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3056(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3057(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3058(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3059(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3060(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3061(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3062(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3063(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3064(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3065(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3066(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3067(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3068(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3069(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3070(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3071(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3072(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3073(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3074(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3075(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3076(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3077(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3078(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3079(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3080(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3081(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3082(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3083(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3084(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3085(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3086(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3087(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3088(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3089(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3090(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3091(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3092(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3093(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3094(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3095(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3096(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3097(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3098(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3099(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3100(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3101(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3102(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3103(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3104(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3105(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3106(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3107(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3108(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3109(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3110(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3111(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3112(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3113(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3114(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3115(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3116(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3117(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3118(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3119(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3120(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3121(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3122(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3123(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3124(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3125(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3126(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3127(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3128(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3129(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3130(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3131(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3132(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3133(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3134(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3135(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3136(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3137(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3138(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3139(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3140(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3141(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3142(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3143(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3144(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3145(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3146(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3147(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3148(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3149(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3150(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3151(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3152(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3153(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3154(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3155(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3156(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3157(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3158(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3159(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3160(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3161(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3162(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3163(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3164(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3165(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3166(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3167(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3168(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3169(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3170(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3171(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3172(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3173(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3174(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3175(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3176(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3177(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3178(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3179(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3180(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3181(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3182(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3183(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3184(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3185(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3186(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3187(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3188(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3189(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3190(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3191(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3192(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3193(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3194(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3195(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3196(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3197(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3198(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3199(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3200(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3201(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3202(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3203(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3204(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3205(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3206(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3207(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3208(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3209(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3210(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3211(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3212(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3213(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3214(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3215(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3216(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3217(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3218(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3219(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3220(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3221(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3222(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3223(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3224(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3225(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3226(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3227(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3228(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3229(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3230(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3231(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3232(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3233(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3234(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3235(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3236(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3237(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3238(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3239(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3240(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3241(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3242(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3243(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3244(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3245(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3246(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3247(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3248(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3249(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3250(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3251(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3252(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3253(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3254(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3255(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3256(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3257(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3258(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3259(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3260(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3261(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3262(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3263(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3264(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3265(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3266(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3267(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3268(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3269(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3270(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3271(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3272(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3273(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3274(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3275(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3276(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3277(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3278(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3279(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3280(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3281(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3282(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3283(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3284(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3285(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3286(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3287(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3288(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3289(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3290(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3291(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3292(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3293(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3294(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3295(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3296(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3297(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3298(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3299(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3300(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3301(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3302(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3303(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3304(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3305(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3306(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3307(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3308(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3309(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3310(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3311(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3312(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3313(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3314(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3315(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3316(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3317(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3318(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3319(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3320(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3321(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3322(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3323(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3324(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3325(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3326(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3327(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3328(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3329(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3330(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3331(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3332(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3333(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3334(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3335(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3336(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3337(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3338(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3339(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3340(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3341(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3342(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3343(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3344(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3345(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3346(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3347(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3348(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3349(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3350(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3351(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3352(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3353(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3354(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3355(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3356(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3357(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3358(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3359(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3360(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3361(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3362(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3363(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3364(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3365(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3366(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3367(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3368(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3369(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3370(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3371(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3372(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3373(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3374(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3375(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3376(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3377(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3378(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3379(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3380(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3381(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3382(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3383(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3384(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3385(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3386(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3387(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3388(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3389(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3390(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3391(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3392(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3393(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3394(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3395(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3396(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3397(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3398(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3399(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3400(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3401(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3402(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3403(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3404(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3405(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3406(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3407(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3408(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3409(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3410(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3411(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3412(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3413(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3414(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3415(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3416(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3417(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3418(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3419(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3420(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3421(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3422(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3423(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3424(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3425(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3426(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3427(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3428(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3429(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3430(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3431(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3432(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3433(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3434(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3435(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3436(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3437(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3438(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3439(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3440(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3441(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3442(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3443(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3444(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3445(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3446(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3447(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3448(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3449(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3450(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3451(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3452(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3453(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3454(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3455(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3456(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3457(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3458(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3459(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3460(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3461(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3462(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3463(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3464(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3465(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3466(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3467(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3468(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3469(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3470(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3471(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3472(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3473(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3474(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3475(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3476(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3477(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3478(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3479(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3480(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3481(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3482(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3483(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3484(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3485(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3486(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3487(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3488(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3489(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3490(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3491(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3492(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3493(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3494(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3495(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3496(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3497(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3498(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3499(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3500(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3501(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3502(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3503(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3504(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3505(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3506(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3507(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3508(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3509(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3510(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3511(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3512(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3513(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3514(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3515(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3516(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3517(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3518(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3519(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3520(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3521(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3522(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3523(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3524(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3525(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3526(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3527(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3528(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3529(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3530(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3531(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3532(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3533(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3534(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3535(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3536(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3537(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3538(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3539(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3540(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3541(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3542(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3543(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3544(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3545(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3546(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3547(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3548(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3549(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3550(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3551(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3552(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3553(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3554(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3555(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3556(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3557(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3558(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3559(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3560(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3561(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3562(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3563(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3564(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3565(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3566(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3567(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3568(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3569(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3570(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3571(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3572(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3573(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3574(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3575(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3576(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3577(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3578(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3579(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3580(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3581(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3582(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3583(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3584(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3585(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3586(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3587(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3588(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3589(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3590(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3591(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3592(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3593(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3594(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3595(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3596(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3597(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3598(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3599(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3600(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3601(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3602(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3603(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3604(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3605(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3606(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3607(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3608(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3609(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3610(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3611(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3612(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3613(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3614(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3615(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3616(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3617(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3618(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3619(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3620(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3621(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3622(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3623(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3624(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3625(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3626(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3627(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3628(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3629(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3630(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3631(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3632(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3633(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3634(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3635(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3636(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3637(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3638(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3639(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3640(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3641(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3642(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3643(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3644(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3645(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3646(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3647(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3648(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3649(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3650(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3651(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3652(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3653(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3654(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3655(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3656(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3657(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3658(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3659(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3660(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3661(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3662(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3663(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3664(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3665(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3666(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3667(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3668(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3669(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3670(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3671(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3672(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3673(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3674(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3675(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3676(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3677(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3678(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3679(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3680(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3681(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3682(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3683(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3684(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3685(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3686(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3687(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3688(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3689(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3690(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3691(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3692(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3693(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3694(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3695(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3696(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3697(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3698(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3699(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3700(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3701(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3702(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3703(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3704(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3705(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3706(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3707(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3708(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3709(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3710(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3711(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3712(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3713(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3714(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3715(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3716(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3717(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3718(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3719(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3720(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3721(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3722(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3723(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3724(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3725(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3726(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3727(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3728(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3729(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3730(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3731(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3732(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3733(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3734(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3735(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3736(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3737(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3738(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3739(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3740(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3741(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3742(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3743(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3744(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3745(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3746(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3747(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3748(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3749(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3750(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3751(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3752(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3753(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3754(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3755(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3756(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3757(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3758(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3759(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3760(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3761(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3762(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3763(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3764(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3765(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3766(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3767(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3768(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3769(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3770(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3771(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3772(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3773(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3774(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3775(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3776(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3777(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3778(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3779(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3780(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3781(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3782(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3783(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3784(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3785(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3786(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3787(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3788(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3789(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3790(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3791(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3792(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3793(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3794(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3795(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3796(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3797(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3798(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3799(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3800(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3801(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3802(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3803(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3804(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3805(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3806(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3807(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3808(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3809(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3810(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3811(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3812(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3813(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3814(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3815(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3816(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3817(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3818(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3819(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3820(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3821(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3822(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3823(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3824(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3825(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3826(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3827(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3828(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3829(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3830(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3831(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3832(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3833(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3834(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3835(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3836(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3837(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3838(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3839(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3840(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3841(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3842(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3843(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3844(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3845(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3846(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3847(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3848(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3849(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3850(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3851(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3852(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3853(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3854(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3855(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3856(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3857(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3858(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3859(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3860(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3861(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3862(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3863(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3864(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3865(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3866(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3867(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3868(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3869(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3870(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3871(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3872(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3873(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3874(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3875(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3876(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3877(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3878(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3879(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3880(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3881(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3882(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3883(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3884(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3885(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3886(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3887(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3888(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3889(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3890(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3891(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3892(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3893(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3894(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3895(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3896(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3897(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3898(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3899(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3900(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3901(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3902(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3903(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3904(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3905(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3906(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3907(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3908(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3909(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3910(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3911(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3912(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3913(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3914(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3915(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3916(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3917(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3918(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3919(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3920(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3921(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3922(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3923(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3924(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_name, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3925(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3926(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3927(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3928(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3929(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3930(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3931(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3932(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3933(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3934(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3935(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3936(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3937(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3938(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3939(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3940(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3941(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3942(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3943(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3944(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3945(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3946(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3947(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3948(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3949(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3950(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3951(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3952(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3953(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3954(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3955(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3956(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3957(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3958(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3959(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3960(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3961(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3962(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3963(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3964(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3965(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3966(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3967(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3968(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3969(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3970(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3971(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3972(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3973(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3974(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3975(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3976(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3977(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3978(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3979(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3980(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3981(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3982(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3983(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3984(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3985(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3986(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3987(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3988(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3989(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3990(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3991(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3992(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3993(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3994(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3995(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3996(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3997(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3998(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_3999(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4000(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4001(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4002(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4003(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4004(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4005(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4006(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4007(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4008(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_email(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4009(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4010(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4011(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4012(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4013(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4014(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4015(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4016(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4017(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4018(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4019(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::update_user_account_set_id_N_user_id_N_user_name_N_password_N_email_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_user_name, const string& s_password, const string& s_email, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4020(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_user_name, s_password, s_email, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_EQ_email(tcp_connection* conn, const string& w_email)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4021(?)");
        conn->execute(stmt.bind(w_email), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4022(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4023(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4024(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4025(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4026(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4027(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4028(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4029(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4030(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4031(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_account_orm::delete_from_user_account_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4032(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}



} // namespace ORM
