
#pragma once

#include <boost/mysql.hpp>
#include <boost/mysql/tcp.hpp>
#include <boost/describe.hpp>
#include <string>
#include <iostream>
#include <format>
#include "Macros/WanringSuppression.h"
DISABLE_WARNING(4244)
using namespace boost::mysql;
using namespace std;

namespace ORM_test {

struct user_character
{
    int32_t id; // int
    string user_id; // varchar(24)
    string character_name; // varchar(32)
    int32_t level; // int
    int64_t experience; // bigint
    int64_t gold; // bigint
    datetime created_at; // timestamp
    datetime updated_at; // timestamp
};

BOOST_DESCRIBE_STRUCT(user_character, (), (id, user_id, character_name, level, experience, gold, created_at, updated_at));

class user_character_orm
{
public:
    // SP 호출 선언
    static int insert_into_user_character_user_id_N_character_name(tcp_connection* conn, const string& new_user_id, const string& new_character_name);
    static int insert_into_user_character_user_id_N_character_name_N_level(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level);
    static int insert_into_user_character_user_id_N_character_name_N_experience(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int64_t& new_experience);
    static int insert_into_user_character_user_id_N_character_name_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int64_t& new_gold);
    static int insert_into_user_character_user_id_N_character_name_N_level_N_experience(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level, const int64_t& new_experience);
    static int insert_into_user_character_user_id_N_character_name_N_level_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level, const int64_t& new_gold);
    static int insert_into_user_character_user_id_N_character_name_N_experience_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int64_t& new_experience, const int64_t& new_gold);
    static int insert_into_user_character_user_id_N_character_name_N_level_N_experience_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level, const int64_t& new_experience, const int64_t& new_gold);
    static results select_id_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static results select_all_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static results select_all_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static int update_user_character_set_id_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& w_character_name);
    static int update_user_character_set_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& w_user_id);
    static int update_user_character_set_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_character_set_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_character_set_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_character_set_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_character_set_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_character_set_user_id_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& w_character_name);
    static int update_user_character_set_user_id_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& w_user_id);
    static int update_user_character_set_user_id_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_user_id_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_user_id_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_user_id_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_user_id_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_character_name_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const string& w_character_name);
    static int update_user_character_set_character_name_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const string& w_user_id);
    static int update_user_character_set_character_name_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_character_name_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_character_name_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_character_name_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_character_name_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_level_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_level_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_level_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_level_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_level_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_experience_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_experience_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_experience_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_experience_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_experience_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_experience_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_experience_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_gold_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_gold_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_gold_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_gold_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_gold_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_gold_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_gold_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_created_at_where_EQ_character_name(tcp_connection* conn, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_created_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_created_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_created_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_created_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_created_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_created_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_updated_at_where_EQ_character_name(tcp_connection* conn, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_id_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_id_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_character_name_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_experience_N_gold_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int delete_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name);
    static int delete_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id);
    static int delete_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id);
};

// SP 호출 구현

inline int user_character_orm::insert_into_user_character_user_id_N_character_name(tcp_connection* conn, const string& new_user_id, const string& new_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4033(?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_level(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4034(?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_level), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_experience(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int64_t& new_experience)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4035(?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_experience), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int64_t& new_gold)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4036(?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_gold), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_level_N_experience(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level, const int64_t& new_experience)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4037(?, ?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_level, new_experience), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_level_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level, const int64_t& new_gold)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4038(?, ?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_level, new_gold), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_experience_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int64_t& new_experience, const int64_t& new_gold)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4039(?, ?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_experience, new_gold), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::insert_into_user_character_user_id_N_character_name_N_level_N_experience_N_gold(tcp_connection* conn, const string& new_user_id, const string& new_character_name, const int32_t& new_level, const int64_t& new_experience, const int64_t& new_gold)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4040(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(new_user_id, new_character_name, new_level, new_experience, new_gold), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline results user_character_orm::select_id_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4041(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4042(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4043(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4044(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4045(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4046(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4047(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4048(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4049(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4050(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4051(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4052(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4053(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4054(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4055(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4056(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4057(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4058(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4059(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4060(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4061(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4062(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4063(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4064(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4065(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4066(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4067(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4068(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4069(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4070(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4071(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4072(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4073(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4074(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4075(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4076(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4077(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4078(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4079(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4080(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4081(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4082(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4083(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4084(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4085(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4086(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4087(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4088(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4089(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4090(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4091(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4092(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4093(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4094(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4095(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4096(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4097(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4098(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4099(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4100(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4101(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4102(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4103(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4104(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4105(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4106(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4107(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4108(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4109(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4110(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4111(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4112(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4113(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4114(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4115(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4116(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4117(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4118(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4119(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4120(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4121(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4122(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4123(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4124(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4125(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4126(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4127(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4128(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4129(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4130(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4131(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4132(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4133(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4134(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4135(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4136(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4137(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4138(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4139(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4140(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4141(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4142(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4143(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4144(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4145(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4146(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4147(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4148(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4149(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4150(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4151(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4152(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4153(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4154(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4155(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4156(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4157(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4158(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4159(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4160(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4161(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4162(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4163(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4164(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4165(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4166(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4167(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4168(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4169(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4170(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4171(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4172(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4173(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4174(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4175(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4176(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4177(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4178(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4179(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4180(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4181(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4182(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4183(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4184(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4185(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4186(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4187(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4188(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4189(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4190(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4191(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4192(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4193(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4194(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4195(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4196(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4197(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4198(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4199(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4200(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4201(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4202(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4203(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4204(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4205(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4206(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4207(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4208(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4209(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4210(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4211(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4212(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4213(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4214(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4215(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4216(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4217(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4218(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4219(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4220(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4221(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4222(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4223(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4224(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4225(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4226(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4227(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4228(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4229(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4230(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4231(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4232(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4233(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4234(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4235(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4236(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4237(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4238(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4239(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4240(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4241(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4242(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4243(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4244(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4245(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4246(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4247(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4248(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4249(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4250(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4251(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4252(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4253(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4254(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4255(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4256(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4257(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4258(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4259(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4260(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4261(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4262(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4263(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4264(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4265(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4266(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4267(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4268(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4269(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4270(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4271(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4272(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4273(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4274(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4275(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4276(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4277(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4278(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4279(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4280(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4281(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4282(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4283(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4284(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4285(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4286(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4287(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4288(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4289(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4290(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4291(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4292(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4293(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4294(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4295(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4296(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4297(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4298(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4299(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4300(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4301(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4302(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4303(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4304(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4305(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4306(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4307(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4308(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4309(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4310(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4311(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4312(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4313(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4314(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4315(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4316(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4317(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4318(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4319(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4320(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4321(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4322(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4323(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4324(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4325(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4326(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4327(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4328(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4329(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4330(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4331(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4332(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4333(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4334(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4335(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4336(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4337(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4338(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4339(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4340(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4341(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4342(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4343(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4344(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4345(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4346(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4347(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4348(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4349(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4350(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4351(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4352(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4353(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4354(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4355(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4356(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4357(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4358(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4359(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4360(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4361(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4362(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4363(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4364(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4365(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4366(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4367(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4368(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4369(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4370(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4371(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4372(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4373(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4374(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4375(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4376(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4377(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4378(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4379(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4380(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4381(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4382(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4383(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4384(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4385(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4386(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4387(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4388(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4389(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4390(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4391(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4392(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4393(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4394(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4395(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4396(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4397(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4398(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4399(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4400(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4401(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4402(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4403(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4404(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4405(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4406(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4407(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4408(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4409(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4410(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4411(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4412(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4413(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4414(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4415(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4416(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4417(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4418(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4419(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4420(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4421(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4422(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4423(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4424(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4425(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4426(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4427(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4428(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4429(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4430(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4431(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4432(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4433(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4434(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4435(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4436(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4437(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4438(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4439(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4440(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4441(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4442(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4443(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4444(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4445(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4446(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4447(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4448(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4449(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4450(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4451(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4452(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4453(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4454(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4455(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4456(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4457(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4458(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4459(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4460(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4461(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4462(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4463(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4464(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4465(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4466(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4467(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4468(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4469(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4470(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4471(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4472(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4473(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4474(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4475(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4476(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4477(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4478(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4479(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4480(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4481(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4482(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4483(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4484(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4485(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4486(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4487(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4488(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4489(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4490(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4491(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4492(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4493(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4494(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4495(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4496(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4497(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4498(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4499(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4500(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4501(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4502(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4503(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4504(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4505(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4506(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4507(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4508(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4509(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4510(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4511(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4512(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4513(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4514(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4515(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4516(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4517(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4518(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4519(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4520(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4521(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4522(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4523(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4524(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4525(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4526(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4527(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4528(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4529(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4530(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4531(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4532(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4533(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4534(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4535(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4536(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4537(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4538(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4539(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4540(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4541(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4542(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4543(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4544(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4545(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4546(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4547(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4548(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4549(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4550(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4551(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4552(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4553(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4554(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4555(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4556(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4557(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4558(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4559(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4560(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4561(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4562(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4563(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4564(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4565(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4566(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4567(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4568(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4569(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4570(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4571(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4572(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4573(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4574(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4575(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4576(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4577(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4578(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4579(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4580(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4581(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4582(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4583(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4584(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4585(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4586(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4587(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4588(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4589(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4590(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4591(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4592(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4593(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4594(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4595(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4596(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4597(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4598(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4599(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4600(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4601(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4602(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4603(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4604(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4605(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4606(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4607(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4608(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4609(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4610(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4611(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4612(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4613(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4614(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4615(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4616(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4617(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4618(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4619(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4620(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4621(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4622(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4623(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4624(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4625(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4626(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4627(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4628(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4629(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4630(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4631(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4632(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4633(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4634(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4635(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4636(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4637(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4638(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4639(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4640(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4641(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4642(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4643(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4644(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4645(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4646(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4647(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4648(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4649(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4650(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4651(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4652(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4653(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4654(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4655(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4656(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4657(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4658(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4659(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4660(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4661(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4662(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4663(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4664(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4665(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4666(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4667(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4668(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4669(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4670(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4671(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4672(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4673(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4674(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4675(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4676(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4677(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4678(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4679(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4680(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4681(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4682(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4683(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4684(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4685(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4686(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4687(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4688(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4689(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4690(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4691(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4692(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4693(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4694(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4695(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4696(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4697(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4698(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4699(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4700(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4701(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4702(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4703(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4704(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4705(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4706(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4707(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4708(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4709(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4710(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4711(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4712(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4713(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4714(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4715(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4716(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4717(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4718(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4719(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4720(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4721(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4722(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4723(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4724(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4725(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4726(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4727(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4728(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4729(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4730(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4731(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4732(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4733(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4734(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4735(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4736(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4737(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4738(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4739(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4740(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4741(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4742(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4743(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4744(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4745(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4746(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4747(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4748(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4749(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4750(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4751(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4752(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4753(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4754(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4755(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4756(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4757(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4758(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4759(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4760(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4761(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4762(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4763(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4764(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4765(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4766(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4767(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4768(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4769(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4770(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4771(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4772(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4773(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4774(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4775(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4776(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4777(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4778(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4779(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4780(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4781(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4782(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4783(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4784(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4785(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4786(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4787(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4788(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4789(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4790(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4791(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4792(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4793(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4794(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4795(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4796(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4797(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4798(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4799(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4800(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4801(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4802(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4803(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4804(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4805(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4806(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4807(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4808(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4809(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4810(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4811(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4812(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4813(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4814(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4815(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4816(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4817(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4818(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4819(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4820(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4821(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4822(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4823(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4824(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4825(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4826(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4827(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4828(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4829(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4830(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4831(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4832(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4833(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4834(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4835(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4836(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4837(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4838(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4839(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4840(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4841(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4842(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4843(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4844(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4845(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4846(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4847(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4848(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4849(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4850(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4851(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4852(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4853(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4854(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4855(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4856(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4857(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4858(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4859(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4860(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4861(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4862(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4863(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4864(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4865(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4866(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4867(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4868(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4869(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4870(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4871(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4872(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4873(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4874(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4875(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4876(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4877(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4878(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4879(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4880(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4881(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4882(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4883(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4884(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4885(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4886(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4887(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4888(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4889(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4890(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4891(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4892(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4893(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4894(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4895(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4896(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4897(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4898(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4899(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4900(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4901(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4902(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4903(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4904(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4905(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4906(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4907(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4908(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4909(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4910(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4911(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4912(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4913(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4914(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4915(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4916(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4917(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4918(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4919(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4920(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4921(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4922(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4923(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4924(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4925(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4926(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4927(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4928(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4929(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4930(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4931(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4932(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4933(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4934(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4935(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4936(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4937(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4938(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4939(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4940(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4941(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4942(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4943(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4944(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4945(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4946(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4947(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4948(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4949(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4950(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4951(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4952(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4953(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4954(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4955(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4956(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4957(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4958(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4959(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4960(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4961(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4962(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4963(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4964(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4965(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4966(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4967(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4968(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4969(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4970(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4971(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4972(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4973(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4974(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4975(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4976(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4977(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4978(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4979(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4980(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4981(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4982(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4983(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4984(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4985(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4986(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4987(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4988(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4989(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4990(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4991(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4992(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4993(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4994(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4995(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4996(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4997(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4998(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_4999(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5000(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5001(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5002(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5003(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5004(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5005(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5006(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5007(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5008(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5009(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5010(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5011(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5012(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5013(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5014(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5015(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5016(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5017(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5018(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5019(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5020(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5021(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5022(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5023(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5024(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5025(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5026(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5027(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5028(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5029(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5030(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5031(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5032(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5033(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5034(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5035(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5036(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5037(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5038(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5039(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5040(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5041(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5042(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5043(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5044(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5045(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5046(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5047(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5048(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5049(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5050(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5051(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5052(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5053(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5054(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5055(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5056(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5057(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5058(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5059(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5060(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5061(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5062(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5063(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5064(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5065(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5066(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5067(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5068(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5069(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5070(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5071(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5072(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5073(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5074(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5075(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5076(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5077(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5078(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5079(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5080(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5081(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5082(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5083(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5084(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5085(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5086(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5087(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5088(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5089(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5090(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5091(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5092(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5093(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5094(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5095(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5096(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5097(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5098(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5099(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5100(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5101(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5102(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5103(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5104(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5105(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5106(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5107(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5108(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5109(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5110(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5111(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5112(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5113(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5114(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5115(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5116(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5117(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5118(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5119(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5120(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5121(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5122(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5123(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5124(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5125(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5126(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5127(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5128(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5129(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5130(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5131(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5132(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5133(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5134(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5135(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5136(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5137(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5138(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5139(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5140(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5141(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5142(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5143(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5144(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5145(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5146(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5147(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5148(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5149(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5150(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5151(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5152(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5153(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5154(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5155(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5156(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5157(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5158(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5159(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5160(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5161(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5162(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5163(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5164(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5165(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5166(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5167(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5168(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5169(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5170(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5171(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5172(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5173(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5174(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5175(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5176(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5177(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5178(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5179(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5180(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5181(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5182(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5183(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5184(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5185(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5186(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5187(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5188(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5189(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5190(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5191(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5192(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5193(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5194(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5195(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5196(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5197(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5198(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5199(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5200(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5201(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5202(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5203(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5204(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5205(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5206(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5207(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5208(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5209(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5210(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5211(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5212(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5213(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5214(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5215(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5216(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5217(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5218(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5219(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5220(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5221(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5222(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5223(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5224(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5225(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5226(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5227(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5228(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5229(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5230(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5231(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5232(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5233(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5234(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5235(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5236(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5237(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5238(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5239(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5240(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5241(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5242(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5243(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5244(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5245(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5246(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5247(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5248(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5249(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5250(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5251(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5252(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5253(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5254(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5255(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5256(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5257(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5258(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5259(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5260(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5261(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5262(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5263(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5264(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5265(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5266(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5267(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5268(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5269(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5270(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5271(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5272(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5273(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5274(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5275(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5276(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5277(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5278(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5279(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5280(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5281(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5282(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5283(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5284(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5285(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5286(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5287(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5288(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5289(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5290(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5291(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5292(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5293(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5294(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5295(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5296(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5297(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5298(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5299(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5300(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5301(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5302(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5303(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5304(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5305(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5306(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5307(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5308(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5309(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5310(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5311(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5312(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5313(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5314(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5315(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5316(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5317(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5318(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5319(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5320(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5321(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5322(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5323(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5324(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5325(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5326(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5327(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5328(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5329(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5330(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5331(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5332(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5333(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5334(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5335(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5336(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5337(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5338(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5339(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5340(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5341(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5342(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5343(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5344(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5345(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5346(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5347(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5348(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5349(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5350(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5351(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5352(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5353(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5354(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5355(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5356(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5357(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5358(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5359(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5360(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5361(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5362(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5363(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5364(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5365(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5366(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5367(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5368(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5369(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5370(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5371(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5372(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5373(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5374(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5375(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5376(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5377(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5378(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5379(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5380(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5381(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5382(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5383(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5384(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5385(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5386(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5387(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5388(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5389(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5390(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5391(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5392(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5393(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5394(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5395(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5396(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5397(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5398(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5399(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5400(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5401(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5402(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5403(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5404(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5405(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5406(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5407(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5408(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5409(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5410(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5411(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5412(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5413(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5414(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5415(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5416(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5417(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5418(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5419(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5420(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5421(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5422(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5423(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5424(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5425(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5426(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5427(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5428(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5429(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5430(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5431(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5432(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5433(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5434(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5435(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5436(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5437(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5438(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5439(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5440(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5441(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5442(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5443(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5444(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5445(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5446(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5447(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5448(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5449(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5450(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5451(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5452(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5453(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5454(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5455(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5456(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5457(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5458(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5459(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5460(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5461(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5462(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5463(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5464(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5465(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5466(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5467(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5468(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5469(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5470(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5471(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5472(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5473(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5474(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5475(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5476(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5477(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5478(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5479(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5480(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5481(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5482(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5483(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5484(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5485(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5486(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5487(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5488(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5489(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5490(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5491(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5492(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5493(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5494(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5495(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5496(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5497(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5498(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5499(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5500(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5501(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5502(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5503(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5504(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5505(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5506(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5507(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5508(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5509(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5510(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5511(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5512(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5513(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5514(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5515(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5516(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5517(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5518(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5519(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5520(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5521(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5522(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5523(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5524(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5525(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5526(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5527(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5528(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5529(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5530(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5531(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5532(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5533(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5534(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5535(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5536(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5537(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5538(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5539(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5540(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5541(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5542(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5543(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5544(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5545(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5546(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5547(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5548(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5549(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5550(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5551(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5552(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5553(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5554(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5555(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5556(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5557(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5558(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5559(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5560(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5561(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5562(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5563(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5564(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5565(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5566(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5567(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5568(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5569(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5570(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5571(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5572(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5573(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5574(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5575(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5576(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5577(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5578(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5579(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5580(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5581(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5582(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5583(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5584(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5585(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5586(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5587(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5588(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5589(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5590(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5591(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5592(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5593(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5594(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5595(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5596(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5597(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5598(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5599(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5600(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5601(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5602(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5603(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5604(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5605(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5606(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5607(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5608(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5609(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5610(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5611(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5612(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5613(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5614(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5615(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5616(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5617(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5618(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5619(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5620(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5621(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5622(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5623(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5624(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5625(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5626(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5627(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5628(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5629(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5630(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5631(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5632(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5633(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5634(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5635(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5636(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5637(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5638(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5639(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5640(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5641(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5642(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5643(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5644(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5645(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5646(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5647(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5648(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5649(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5650(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5651(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5652(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5653(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5654(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5655(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5656(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5657(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5658(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5659(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5660(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5661(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5662(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5663(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5664(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5665(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5666(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5667(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5668(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5669(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5670(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5671(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5672(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5673(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5674(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5675(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5676(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5677(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5678(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5679(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5680(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5681(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5682(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5683(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5684(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5685(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5686(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5687(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5688(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5689(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5690(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5691(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5692(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5693(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5694(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5695(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5696(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5697(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5698(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5699(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5700(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5701(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5702(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5703(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5704(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5705(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5706(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5707(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5708(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5709(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5710(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5711(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5712(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5713(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5714(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5715(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5716(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5717(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5718(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5719(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5720(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5721(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5722(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5723(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5724(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5725(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5726(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5727(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5728(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5729(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5730(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5731(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5732(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5733(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5734(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5735(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5736(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5737(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5738(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5739(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5740(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5741(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5742(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5743(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5744(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5745(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5746(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5747(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5748(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5749(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5750(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5751(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5752(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5753(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5754(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5755(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5756(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5757(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5758(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5759(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5760(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5761(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5762(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5763(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5764(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5765(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5766(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5767(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5768(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5769(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5770(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5771(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5772(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5773(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5774(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5775(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5776(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5777(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5778(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5779(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5780(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5781(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5782(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5783(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5784(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5785(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5786(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5787(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5788(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5789(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5790(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5791(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5792(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5793(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5794(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5795(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5796(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5797(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5798(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5799(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5800(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5801(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5802(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5803(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5804(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5805(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5806(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5807(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5808(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5809(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5810(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5811(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5812(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5813(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5814(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5815(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5816(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5817(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5818(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5819(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5820(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5821(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5822(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5823(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5824(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_character_orm::select_all_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5825(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline int user_character_orm::update_user_character_set_id_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5826(?, ?)");
        conn->execute(stmt.bind(s_id, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5827(?, ?)");
        conn->execute(stmt.bind(s_id, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5828(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5829(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5830(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5831(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5832(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5833(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5834(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5835(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5836(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5837(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5838(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5839(?, ?)");
        conn->execute(stmt.bind(s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5840(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5841(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5842(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5843(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5844(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5845(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5846(?, ?)");
        conn->execute(stmt.bind(s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5847(?, ?)");
        conn->execute(stmt.bind(s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5848(?, ?)");
        conn->execute(stmt.bind(s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5849(?, ?)");
        conn->execute(stmt.bind(s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5850(?, ?)");
        conn->execute(stmt.bind(s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5851(?, ?)");
        conn->execute(stmt.bind(s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5852(?, ?)");
        conn->execute(stmt.bind(s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5853(?, ?)");
        conn->execute(stmt.bind(s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5854(?, ?)");
        conn->execute(stmt.bind(s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5855(?, ?)");
        conn->execute(stmt.bind(s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5856(?, ?)");
        conn->execute(stmt.bind(s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5857(?, ?)");
        conn->execute(stmt.bind(s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5858(?, ?)");
        conn->execute(stmt.bind(s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5859(?, ?)");
        conn->execute(stmt.bind(s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5860(?, ?)");
        conn->execute(stmt.bind(s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5861(?, ?)");
        conn->execute(stmt.bind(s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5862(?, ?)");
        conn->execute(stmt.bind(s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5863(?, ?)");
        conn->execute(stmt.bind(s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5864(?, ?)");
        conn->execute(stmt.bind(s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5865(?, ?)");
        conn->execute(stmt.bind(s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5866(?, ?)");
        conn->execute(stmt.bind(s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5867(?, ?)");
        conn->execute(stmt.bind(s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_EQ_character_name(tcp_connection* conn, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5868(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5869(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5870(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5871(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5872(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5873(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5874(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_EQ_character_name(tcp_connection* conn, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5875(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5876(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5877(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5878(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5879(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5880(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5881(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5882(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5883(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5884(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5885(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5886(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5887(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5888(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5889(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5890(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5891(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5892(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5893(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5894(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5895(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5896(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5897(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5898(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5899(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5900(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5901(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5902(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5903(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5904(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5905(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5906(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5907(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5908(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5909(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5910(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5911(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5912(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5913(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5914(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5915(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5916(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5917(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5918(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5919(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5920(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5921(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5922(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5923(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5924(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5925(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5926(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5927(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5928(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5929(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5930(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5931(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5932(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5933(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5934(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5935(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5936(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5937(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5938(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5939(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5940(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5941(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5942(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5943(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5944(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5945(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5946(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5947(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5948(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5949(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5950(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5951(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5952(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5953(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5954(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5955(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5956(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5957(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5958(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5959(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5960(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5961(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5962(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5963(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5964(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5965(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5966(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5967(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5968(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5969(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5970(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5971(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5972(?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5973(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5974(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5975(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5976(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5977(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5978(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5979(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5980(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5981(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5982(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5983(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5984(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5985(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5986(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5987(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5988(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5989(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5990(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5991(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5992(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5993(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5994(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5995(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5996(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5997(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5998(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_5999(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6000(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6001(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6002(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6003(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6004(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6005(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6006(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6007(?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6008(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6009(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6010(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6011(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6012(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6013(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6014(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6015(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6016(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6017(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6018(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6019(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6020(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6021(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6022(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6023(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6024(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6025(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6026(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6027(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6028(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6029(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6030(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6031(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6032(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6033(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6034(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6035(?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6036(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6037(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6038(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6039(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6040(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6041(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6042(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6043(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6044(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6045(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6046(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6047(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6048(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6049(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6050(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6051(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6052(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6053(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6054(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6055(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6056(?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6057(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6058(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6059(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6060(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6061(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6062(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6063(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6064(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6065(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6066(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6067(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6068(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6069(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6070(?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6071(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6072(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6073(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6074(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6075(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6076(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6077(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6078(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6079(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6080(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6081(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6082(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6083(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6084(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6085(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6086(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6087(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6088(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6089(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6090(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6091(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6092(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6093(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6094(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6095(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6096(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6097(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6098(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6099(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6100(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6101(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6102(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6103(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6104(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6105(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6106(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6107(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6108(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6109(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6110(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6111(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6112(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6113(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6114(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6115(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6116(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6117(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6118(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6119(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6120(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6121(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6122(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6123(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6124(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6125(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6126(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6127(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6128(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6129(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6130(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6131(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6132(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6133(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6134(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6135(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6136(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6137(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6138(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6139(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6140(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6141(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6142(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6143(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6144(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6145(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6146(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6147(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6148(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6149(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6150(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6151(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6152(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6153(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6154(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6155(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6156(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6157(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6158(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6159(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6160(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6161(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6162(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6163(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6164(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6165(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6166(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6167(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6168(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6169(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6170(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6171(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6172(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6173(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6174(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6175(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6176(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6177(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6178(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6179(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6180(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6181(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6182(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6183(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6184(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6185(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6186(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6187(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6188(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6189(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6190(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6191(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6192(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6193(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6194(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6195(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6196(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6197(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6198(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6199(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6200(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6201(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6202(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6203(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6204(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6205(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6206(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6207(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6208(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6209(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6210(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6211(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6212(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6213(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6214(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6215(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6216(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6217(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6218(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6219(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6220(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6221(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6222(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6223(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6224(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6225(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6226(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6227(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6228(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6229(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6230(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6231(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6232(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6233(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6234(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6235(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6236(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6237(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6238(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6239(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6240(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6241(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6242(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6243(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6244(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6245(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6246(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6247(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6248(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6249(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6250(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6251(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6252(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6253(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6254(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6255(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6256(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6257(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6258(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6259(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6260(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6261(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6262(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6263(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6264(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6265(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6266(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6267(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6268(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6269(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6270(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6271(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6272(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6273(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6274(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6275(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6276(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6277(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6278(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6279(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6280(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6281(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6282(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6283(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6284(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6285(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6286(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6287(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6288(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6289(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6290(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6291(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6292(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6293(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6294(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6295(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6296(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6297(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6298(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6299(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6300(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6301(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6302(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6303(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6304(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6305(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6306(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6307(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6308(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6309(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6310(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6311(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6312(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6313(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6314(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6315(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6316(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6317(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6318(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6319(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6320(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6321(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6322(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6323(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6324(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6325(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6326(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6327(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6328(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6329(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6330(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6331(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6332(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6333(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6334(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6335(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6336(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6337(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6338(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6339(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6340(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6341(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6342(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6343(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6344(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6345(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6346(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6347(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6348(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6349(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6350(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6351(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6352(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6353(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6354(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6355(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6356(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6357(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6358(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6359(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6360(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6361(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6362(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6363(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6364(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6365(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6366(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6367(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6368(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6369(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6370(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6371(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6372(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6373(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6374(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6375(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6376(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6377(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6378(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6379(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6380(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6381(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6382(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6383(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6384(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6385(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6386(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6387(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6388(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6389(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6390(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6391(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6392(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6393(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6394(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6395(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6396(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6397(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6398(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6399(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6400(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6401(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6402(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6403(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6404(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6405(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6406(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6407(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6408(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6409(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6410(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6411(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6412(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6413(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6414(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6415(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6416(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6417(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6418(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6419(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6420(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6421(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6422(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6423(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6424(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6425(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6426(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6427(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6428(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6429(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6430(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6431(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6432(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6433(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6434(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6435(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6436(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6437(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6438(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6439(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6440(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6441(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6442(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6443(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6444(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6445(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6446(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6447(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6448(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6449(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6450(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6451(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6452(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6453(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6454(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6455(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6456(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6457(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6458(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6459(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6460(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6461(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6462(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6463(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6464(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6465(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6466(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6467(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6468(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6469(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6470(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6471(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6472(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6473(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6474(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6475(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6476(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6477(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6478(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6479(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6480(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6481(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6482(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6483(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6484(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6485(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6486(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6487(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6488(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6489(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6490(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6491(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6492(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6493(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6494(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6495(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6496(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6497(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6498(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6499(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6500(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6501(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6502(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6503(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6504(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6505(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6506(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6507(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6508(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6509(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6510(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6511(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6512(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6513(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6514(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6515(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6516(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6517(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6518(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6519(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6520(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6521(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6522(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6523(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6524(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6525(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6526(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6527(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6528(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6529(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6530(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6531(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6532(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6533(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6534(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6535(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6536(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6537(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6538(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6539(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6540(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6541(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6542(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6543(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6544(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6545(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6546(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6547(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6548(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6549(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6550(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6551(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6552(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6553(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6554(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6555(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6556(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6557(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6558(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6559(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6560(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6561(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6562(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6563(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6564(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6565(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6566(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6567(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6568(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6569(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6570(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6571(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6572(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6573(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6574(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6575(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6576(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6577(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6578(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6579(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6580(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6581(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6582(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6583(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6584(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6585(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6586(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6587(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6588(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6589(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6590(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6591(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6592(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6593(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6594(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6595(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6596(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6597(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6598(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6599(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6600(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6601(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6602(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6603(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6604(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6605(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6606(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6607(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6608(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6609(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6610(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6611(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6612(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6613(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6614(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6615(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6616(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6617(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6618(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6619(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6620(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6621(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6622(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6623(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6624(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6625(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6626(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6627(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6628(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6629(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6630(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6631(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6632(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6633(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6634(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6635(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6636(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6637(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6638(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6639(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6640(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6641(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6642(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6643(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6644(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6645(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6646(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6647(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6648(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6649(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6650(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6651(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6652(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6653(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6654(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6655(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6656(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6657(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6658(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6659(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6660(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6661(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6662(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6663(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6664(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6665(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6666(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6667(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6668(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6669(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6670(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6671(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6672(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6673(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6674(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6675(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6676(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6677(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6678(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6679(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6680(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6681(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6682(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6683(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6684(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6685(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6686(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6687(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6688(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6689(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6690(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6691(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6692(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6693(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6694(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6695(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6696(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6697(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6698(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6699(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6700(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6701(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6702(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6703(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6704(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6705(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6706(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6707(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6708(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6709(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6710(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6711(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6712(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6713(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6714(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6715(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6716(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6717(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6718(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6719(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6720(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6721(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6722(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6723(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6724(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6725(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6726(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6727(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6728(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6729(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6730(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6731(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6732(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6733(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6734(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6735(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6736(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6737(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6738(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6739(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6740(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6741(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6742(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6743(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6744(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6745(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6746(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6747(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6748(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6749(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6750(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6751(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6752(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6753(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6754(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6755(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6756(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6757(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6758(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6759(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6760(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6761(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6762(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6763(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6764(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6765(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6766(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6767(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6768(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6769(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6770(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6771(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6772(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6773(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6774(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6775(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6776(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6777(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6778(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6779(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6780(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6781(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6782(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6783(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6784(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6785(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6786(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6787(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6788(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6789(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6790(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6791(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6792(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6793(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6794(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6795(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6796(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6797(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6798(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6799(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6800(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6801(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6802(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6803(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6804(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6805(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6806(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6807(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6808(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6809(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6810(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6811(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6812(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6813(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6814(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6815(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6816(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6817(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6818(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6819(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6820(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6821(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6822(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6823(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6824(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6825(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6826(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6827(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6828(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6829(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6830(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6831(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6832(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6833(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6834(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6835(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6836(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6837(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6838(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6839(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6840(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6841(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6842(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6843(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6844(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6845(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6846(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6847(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6848(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6849(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6850(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6851(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6852(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6853(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6854(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6855(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6856(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6857(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6858(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6859(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6860(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6861(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6862(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6863(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6864(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6865(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6866(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6867(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6868(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6869(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6870(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6871(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6872(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6873(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6874(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6875(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6876(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6877(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6878(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6879(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6880(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6881(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6882(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6883(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6884(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6885(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6886(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6887(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6888(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6889(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6890(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6891(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6892(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6893(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6894(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6895(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6896(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6897(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6898(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6899(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6900(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6901(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6902(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6903(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6904(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6905(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6906(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6907(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6908(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6909(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6910(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6911(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6912(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6913(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6914(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6915(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6916(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6917(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6918(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6919(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6920(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6921(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6922(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6923(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6924(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6925(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6926(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6927(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6928(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6929(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6930(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6931(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6932(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6933(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6934(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6935(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6936(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6937(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6938(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6939(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6940(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6941(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6942(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6943(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6944(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6945(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6946(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6947(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6948(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6949(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6950(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6951(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6952(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6953(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6954(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6955(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6956(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6957(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6958(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6959(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6960(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6961(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6962(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6963(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6964(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6965(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6966(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6967(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6968(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6969(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6970(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6971(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6972(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6973(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6974(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6975(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6976(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6977(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6978(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6979(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6980(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6981(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6982(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6983(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6984(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6985(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6986(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6987(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6988(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6989(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6990(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6991(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6992(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6993(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6994(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6995(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6996(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6997(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6998(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_6999(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7000(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7001(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7002(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7003(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7004(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7005(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7006(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7007(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7008(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7009(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7010(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7011(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7012(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7013(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7014(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7015(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7016(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7017(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7018(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7019(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7020(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7021(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7022(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7023(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7024(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7025(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7026(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7027(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7028(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7029(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7030(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7031(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7032(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7033(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7034(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7035(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7036(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7037(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7038(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7039(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7040(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7041(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7042(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7043(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7044(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7045(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7046(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7047(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7048(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7049(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7050(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7051(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7052(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7053(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7054(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7055(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7056(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7057(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7058(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7059(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7060(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7061(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7062(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7063(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7064(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7065(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7066(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7067(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7068(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7069(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7070(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7071(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7072(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7073(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7074(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7075(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7076(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7077(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7078(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7079(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7080(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7081(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7082(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7083(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7084(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7085(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7086(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7087(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7088(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7089(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7090(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7091(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7092(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7093(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7094(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7095(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7096(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7097(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7098(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7099(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7100(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7101(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7102(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7103(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7104(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7105(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7106(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7107(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7108(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7109(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7110(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7111(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7112(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7113(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7114(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7115(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7116(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7117(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7118(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7119(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7120(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7121(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7122(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7123(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7124(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7125(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7126(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7127(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7128(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7129(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7130(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7131(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7132(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7133(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7134(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7135(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7136(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7137(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7138(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7139(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7140(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7141(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7142(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7143(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7144(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7145(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7146(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7147(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7148(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7149(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7150(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7151(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7152(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7153(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7154(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7155(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7156(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7157(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7158(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7159(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7160(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7161(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7162(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7163(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7164(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7165(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7166(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7167(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7168(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7169(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7170(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7171(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7172(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7173(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7174(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7175(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7176(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7177(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7178(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7179(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7180(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7181(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7182(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7183(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7184(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7185(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7186(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7187(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7188(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7189(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7190(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7191(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7192(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7193(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7194(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7195(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7196(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7197(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7198(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7199(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7200(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7201(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7202(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7203(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7204(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7205(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7206(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7207(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7208(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7209(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7210(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7211(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7212(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7213(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7214(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7215(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7216(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7217(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7218(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7219(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7220(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7221(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7222(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7223(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7224(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7225(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7226(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7227(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7228(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7229(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7230(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7231(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7232(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7233(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7234(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7235(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7236(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7237(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7238(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7239(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7240(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7241(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7242(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7243(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7244(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7245(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7246(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7247(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7248(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7249(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7250(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7251(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7252(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7253(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7254(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7255(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7256(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7257(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7258(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7259(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7260(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7261(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7262(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7263(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7264(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7265(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7266(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7267(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7268(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7269(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7270(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7271(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7272(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7273(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7274(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7275(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7276(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7277(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7278(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7279(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7280(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7281(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7282(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7283(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7284(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7285(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7286(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7287(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7288(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7289(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7290(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7291(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7292(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7293(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7294(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7295(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7296(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7297(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7298(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7299(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7300(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7301(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7302(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7303(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7304(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7305(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7306(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7307(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7308(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7309(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7310(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7311(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7312(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7313(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7314(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7315(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7316(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7317(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7318(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7319(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7320(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7321(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7322(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7323(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7324(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7325(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7326(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7327(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7328(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7329(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7330(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7331(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7332(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7333(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7334(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7335(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7336(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7337(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7338(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7339(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7340(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7341(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7342(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7343(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7344(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7345(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7346(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7347(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7348(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7349(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7350(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7351(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7352(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7353(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7354(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7355(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7356(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7357(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7358(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7359(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7360(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7361(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7362(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7363(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7364(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7365(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7366(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7367(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7368(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7369(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7370(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7371(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7372(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7373(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7374(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7375(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7376(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7377(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7378(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7379(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7380(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7381(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7382(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7383(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7384(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7385(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7386(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7387(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7388(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7389(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7390(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7391(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7392(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7393(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7394(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7395(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7396(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7397(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7398(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7399(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7400(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7401(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7402(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7403(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7404(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7405(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7406(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7407(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7408(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7409(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7410(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7411(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7412(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7413(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7414(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7415(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7416(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7417(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7418(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7419(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7420(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7421(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7422(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7423(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7424(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7425(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7426(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7427(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7428(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7429(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7430(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7431(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7432(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7433(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7434(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7435(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7436(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7437(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7438(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7439(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7440(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7441(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7442(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7443(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7444(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7445(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7446(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7447(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7448(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7449(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7450(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7451(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7452(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7453(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7454(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7455(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7456(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7457(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7458(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7459(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7460(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7461(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7462(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7463(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7464(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7465(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7466(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7467(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7468(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7469(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7470(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7471(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7472(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7473(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7474(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7475(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7476(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7477(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7478(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7479(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7480(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7481(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7482(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7483(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7484(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7485(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7486(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7487(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7488(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7489(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7490(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7491(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7492(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7493(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7494(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7495(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7496(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7497(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7498(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7499(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7500(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7501(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7502(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7503(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7504(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7505(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7506(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7507(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7508(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7509(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7510(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7511(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7512(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7513(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7514(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7515(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7516(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7517(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7518(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7519(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7520(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7521(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7522(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7523(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7524(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7525(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7526(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7527(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7528(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7529(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7530(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7531(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7532(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7533(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7534(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7535(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7536(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7537(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7538(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7539(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7540(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7541(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7542(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7543(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7544(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7545(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7546(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7547(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7548(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7549(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7550(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7551(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7552(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7553(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7554(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7555(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7556(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7557(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7558(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7559(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7560(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7561(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7562(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7563(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7564(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7565(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7566(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7567(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7568(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7569(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7570(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7571(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7572(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7573(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7574(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7575(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7576(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7577(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7578(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7579(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7580(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7581(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7582(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7583(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7584(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7585(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7586(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7587(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7588(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7589(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7590(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7591(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7592(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7593(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7594(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7595(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7596(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7597(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7598(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7599(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7600(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7601(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7602(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7603(?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_character_name(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7604(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_user_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7605(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7606(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7607(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7608(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7609(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::update_user_character_set_id_N_user_id_N_character_name_N_level_N_experience_N_gold_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const string& s_user_id, const string& s_character_name, const int32_t& s_level, const int64_t& s_experience, const int64_t& s_gold, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7610(?, ?, ?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_user_id, s_character_name, s_level, s_experience, s_gold, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_EQ_character_name(tcp_connection* conn, const string& w_character_name)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7611(?)");
        conn->execute(stmt.bind(w_character_name), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_EQ_user_id(tcp_connection* conn, const string& w_user_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7612(?)");
        conn->execute(stmt.bind(w_user_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7613(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7614(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7615(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7616(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_character_orm::delete_from_user_character_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7617(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}



} // namespace ORM
DISABLE_WARNING_POP
