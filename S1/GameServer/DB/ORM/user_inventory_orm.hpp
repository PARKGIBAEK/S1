
#pragma once

#include <boost/mysql.hpp>
#include <boost/mysql/tcp.hpp>
#include <boost/describe.hpp>
#include <string>
#include <iostream>
#include <format>
#include "Macros/WanringSuppression.h"
DISABLE_WARNING(4244)

using namespace boost::mysql;
using namespace std;

namespace ORM_test {

struct user_inventory
{
    int32_t id; // int
    int32_t character_id; // int
    int32_t item_id; // int
    int32_t quantity; // int
    datetime created_at; // timestamp
    datetime updated_at; // timestamp
};

BOOST_DESCRIBE_STRUCT(user_inventory, (), (id, character_id, item_id, quantity, created_at, updated_at));

class user_inventory_orm
{
public:
    // SP 호출 선언
    static int insert_into_user_inventory_character_id_N_item_id(tcp_connection* conn, const int32_t& new_character_id, const int32_t& new_item_id);
    static int insert_into_user_inventory_character_id_N_item_id_N_quantity(tcp_connection* conn, const int32_t& new_character_id, const int32_t& new_item_id, const int32_t& new_quantity);
    static results select_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_all_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_all_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_all_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_all_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static results select_all_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static results select_all_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_all_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_all_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_all_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_all_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static results select_all_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static results select_all_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
    static int update_user_inventory_set_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_inventory_set_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_inventory_set_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_inventory_set_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_inventory_set_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_created_at_where_EQ_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_where_LT_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_where_LE_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_where_GT_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_where_GE_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_where_EQ_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_where_LT_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_where_LE_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_where_GT_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_where_GE_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_updated_at_where_EQ_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_updated_at_where_LT_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_updated_at_where_LE_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_updated_at_where_GT_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_updated_at_where_GE_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_updated_at_where_EQ_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_updated_at_where_LT_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_updated_at_where_LE_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_updated_at_where_GT_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_updated_at_where_GE_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id);
    static int delete_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static int delete_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static int delete_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static int delete_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static int delete_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id);
    static int delete_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at);
    static int delete_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static int delete_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static int delete_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static int delete_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static int delete_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id);
    static int delete_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id);
    static int delete_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id);
};

// SP 호출 구현

inline int user_inventory_orm::insert_into_user_inventory_character_id_N_item_id(tcp_connection* conn, const int32_t& new_character_id, const int32_t& new_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7618(?, ?)");
        conn->execute(stmt.bind(new_character_id, new_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::insert_into_user_inventory_character_id_N_item_id_N_quantity(tcp_connection* conn, const int32_t& new_character_id, const int32_t& new_item_id, const int32_t& new_quantity)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7619(?, ?, ?)");
        conn->execute(stmt.bind(new_character_id, new_item_id, new_quantity), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return -1;
    }

    return result.affected_rows();
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7620(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7621(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7622(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7623(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7624(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7625(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7626(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7627(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7628(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7629(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7630(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7631(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7632(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7633(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7634(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7635(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7636(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7637(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7638(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7639(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7640(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7641(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7642(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7643(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7644(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7645(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7646(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7647(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7648(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7649(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7650(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7651(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7652(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7653(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7654(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7655(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7656(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7657(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7658(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7659(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7660(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7661(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7662(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7663(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7664(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7665(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7666(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7667(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7668(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7669(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7670(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7671(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7672(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7673(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7674(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7675(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7676(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7677(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7678(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7679(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7680(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7681(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7682(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7683(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7684(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7685(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7686(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7687(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7688(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7689(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7690(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7691(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7692(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7693(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7694(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7695(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7696(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7697(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7698(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7699(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7700(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7701(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7702(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7703(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7704(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7705(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7706(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7707(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7708(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7709(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7710(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7711(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7712(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7713(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7714(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7715(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7716(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7717(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7718(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7719(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7720(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7721(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7722(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7723(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7724(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7725(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7726(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7727(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7728(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7729(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7730(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7731(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7732(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7733(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7734(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7735(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7736(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7737(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7738(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7739(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7740(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7741(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7742(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7743(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7744(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7745(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7746(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7747(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7748(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7749(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7750(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7751(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7752(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7753(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7754(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7755(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7756(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7757(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7758(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7759(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7760(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7761(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7762(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7763(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7764(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7765(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7766(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7767(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7768(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7769(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7770(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7771(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7772(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7773(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7774(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7775(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7776(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7777(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7778(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7779(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7780(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7781(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7782(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7783(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7784(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7785(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7786(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7787(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7788(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7789(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7790(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7791(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7792(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7793(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7794(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7795(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7796(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7797(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7798(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7799(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7800(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7801(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7802(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7803(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7804(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7805(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7806(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7807(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7808(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7809(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7810(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7811(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7812(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7813(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7814(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7815(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7816(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7817(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7818(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7819(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7820(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7821(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7822(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7823(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7824(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7825(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7826(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7827(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7828(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7829(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7830(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7831(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7832(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7833(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7834(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7835(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7836(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7837(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7838(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7839(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7840(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7841(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7842(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7843(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7844(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7845(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7846(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7847(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7848(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7849(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7850(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7851(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7852(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7853(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7854(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7855(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7856(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7857(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7858(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7859(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7860(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7861(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7862(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7863(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7864(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7865(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7866(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7867(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7868(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7869(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7870(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7871(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7872(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7873(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7874(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7875(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7876(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7877(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7878(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7879(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7880(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7881(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7882(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7883(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7884(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7885(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7886(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7887(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7888(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7889(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7890(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7891(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7892(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7893(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7894(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7895(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7896(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7897(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7898(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7899(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7900(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7901(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7902(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7903(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7904(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7905(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7906(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7907(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7908(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7909(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7910(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7911(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7912(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7913(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7914(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7915(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7916(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7917(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7918(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7919(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7920(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7921(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7922(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7923(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7924(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7925(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7926(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7927(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7928(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7929(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7930(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7931(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7932(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7933(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7934(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7935(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7936(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7937(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7938(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7939(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7940(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7941(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7942(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7943(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7944(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7945(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7946(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7947(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7948(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7949(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7950(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7951(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7952(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7953(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7954(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7955(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7956(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7957(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7958(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7959(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7960(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7961(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7962(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7963(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7964(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7965(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7966(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7967(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7968(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7969(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7970(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7971(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7972(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7973(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7974(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7975(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7976(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7977(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7978(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7979(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7980(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7981(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7982(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7983(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7984(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7985(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7986(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7987(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7988(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7989(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7990(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7991(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7992(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7993(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7994(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7995(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7996(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7997(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7998(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_7999(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8000(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8001(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8002(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8003(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8004(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8005(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8006(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8007(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8008(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8009(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8010(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8011(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8012(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8013(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8014(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8015(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8016(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8017(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8018(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8019(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8020(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8021(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8022(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8023(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8024(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8025(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8026(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8027(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8028(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8029(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8030(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8031(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8032(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8033(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8034(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8035(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8036(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8037(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8038(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8039(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8040(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8041(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8042(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8043(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8044(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8045(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8046(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8047(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8048(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8049(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8050(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8051(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8052(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8053(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8054(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8055(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8056(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8057(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8058(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8059(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8060(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8061(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8062(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8063(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8064(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8065(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8066(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8067(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8068(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8069(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8070(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8071(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8072(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8073(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8074(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8075(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8076(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8077(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8078(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8079(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8080(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8081(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8082(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8083(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8084(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8085(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8086(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8087(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8088(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8089(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8090(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8091(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8092(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8093(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8094(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8095(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8096(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8097(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8098(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8099(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8100(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8101(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8102(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8103(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8104(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8105(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8106(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8107(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8108(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8109(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8110(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8111(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8112(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8113(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8114(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8115(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8116(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8117(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8118(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8119(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8120(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8121(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8122(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8123(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8124(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8125(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8126(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8127(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8128(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8129(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8130(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8131(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8132(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8133(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8134(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8135(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8136(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8137(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8138(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8139(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8140(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8141(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8142(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8143(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8144(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8145(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8146(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8147(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8148(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8149(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8150(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8151(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8152(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8153(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8154(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8155(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8156(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8157(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8158(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8159(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8160(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8161(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8162(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8163(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8164(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8165(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8166(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8167(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8168(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8169(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8170(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8171(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8172(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8173(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8174(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8175(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8176(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8177(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8178(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8179(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8180(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8181(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8182(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8183(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8184(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8185(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8186(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8187(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8188(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8189(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8190(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8191(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8192(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8193(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8194(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8195(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8196(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8197(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8198(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8199(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8200(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8201(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8202(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8203(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8204(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8205(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8206(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8207(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8208(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8209(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8210(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8211(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8212(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8213(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8214(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8215(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8216(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8217(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8218(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8219(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8220(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8221(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8222(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8223(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8224(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8225(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8226(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8227(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8228(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8229(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8230(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8231(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8232(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8233(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8234(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8235(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8236(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8237(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8238(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8239(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8240(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8241(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8242(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8243(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8244(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8245(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8246(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8247(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8248(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8249(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8250(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8251(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8252(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8253(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8254(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8255(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8256(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8257(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8258(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8259(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8260(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8261(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8262(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8263(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8264(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8265(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8266(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8267(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8268(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8269(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8270(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8271(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8272(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8273(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8274(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8275(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8276(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8277(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8278(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8279(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8280(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8281(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8282(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8283(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8284(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8285(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8286(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8287(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8288(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8289(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8290(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8291(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8292(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8293(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8294(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8295(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8296(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8297(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8298(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8299(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8300(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8301(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8302(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8303(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8304(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8305(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8306(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8307(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8308(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8309(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8310(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8311(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8312(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8313(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8314(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8315(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8316(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8317(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8318(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8319(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8320(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8321(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8322(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8323(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8324(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8325(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8326(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8327(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8328(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8329(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8330(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8331(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8332(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8333(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8334(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8335(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8336(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8337(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8338(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8339(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8340(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8341(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8342(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8343(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8344(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8345(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8346(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8347(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8348(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8349(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8350(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8351(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8352(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8353(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8354(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8355(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8356(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8357(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8358(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8359(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8360(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8361(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8362(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8363(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8364(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8365(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8366(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8367(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8368(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8369(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8370(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8371(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8372(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8373(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8374(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8375(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8376(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8377(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8378(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8379(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8380(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8381(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8382(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8383(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8384(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8385(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8386(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8387(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8388(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8389(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8390(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8391(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8392(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8393(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8394(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8395(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8396(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8397(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8398(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8399(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8400(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8401(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8402(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8403(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8404(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8405(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8406(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8407(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8408(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8409(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8410(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8411(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8412(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8413(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8414(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8415(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8416(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8417(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8418(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8419(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8420(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8421(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8422(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8423(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8424(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8425(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8426(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8427(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8428(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8429(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8430(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8431(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8432(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8433(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8434(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8435(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8436(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8437(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8438(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8439(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8440(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8441(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8442(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8443(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8444(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8445(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8446(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8447(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8448(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8449(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8450(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8451(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8452(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8453(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8454(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8455(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8456(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8457(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8458(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8459(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8460(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8461(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8462(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8463(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8464(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8465(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8466(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8467(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8468(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8469(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8470(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8471(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8472(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8473(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8474(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8475(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8476(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8477(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8478(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8479(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8480(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8481(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8482(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8483(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8484(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8485(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8486(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8487(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8488(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8489(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8490(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8491(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8492(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8493(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8494(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8495(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8496(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8497(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8498(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8499(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8500(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8501(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8502(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8503(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8504(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8505(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8506(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8507(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8508(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8509(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8510(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8511(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8512(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8513(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8514(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8515(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8516(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8517(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8518(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8519(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8520(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8521(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8522(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8523(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8524(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8525(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8526(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8527(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8528(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8529(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8530(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8531(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8532(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8533(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8534(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8535(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8536(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8537(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8538(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8539(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8540(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8541(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8542(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8543(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8544(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8545(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8546(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8547(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8548(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8549(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8550(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8551(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8552(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8553(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8554(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8555(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8556(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8557(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8558(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8559(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8560(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8561(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8562(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8563(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8564(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8565(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8566(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8567(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8568(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8569(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8570(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8571(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8572(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8573(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8574(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8575(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8576(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8577(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8578(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8579(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8580(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8581(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8582(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8583(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8584(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8585(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8586(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8587(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8588(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8589(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8590(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8591(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8592(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8593(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8594(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8595(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8596(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8597(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8598(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8599(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8600(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8601(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8602(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8603(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8604(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8605(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8606(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8607(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8608(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8609(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8610(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8611(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8612(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8613(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8614(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8615(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8616(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8617(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8618(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8619(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8620(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8621(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8622(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8623(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8624(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8625(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8626(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8627(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8628(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8629(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8630(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8631(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8632(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8633(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8634(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8635(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8636(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8637(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8638(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8639(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8640(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8641(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8642(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8643(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8644(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8645(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8646(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8647(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8648(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8649(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8650(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8651(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8652(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8653(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8654(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8655(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8656(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8657(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8658(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8659(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8660(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8661(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8662(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8663(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8664(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8665(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8666(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8667(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8668(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8669(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8670(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8671(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8672(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8673(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8674(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8675(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8676(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8677(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8678(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8679(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8680(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8681(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8682(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8683(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8684(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8685(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8686(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8687(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8688(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8689(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8690(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8691(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8692(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8693(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8694(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8695(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8696(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8697(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8698(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8699(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8700(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8701(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8702(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8703(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8704(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8705(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8706(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8707(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8708(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8709(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8710(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8711(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8712(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8713(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8714(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8715(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8716(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8717(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8718(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8719(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8720(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8721(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8722(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8723(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8724(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8725(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8726(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8727(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8728(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8729(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8730(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8731(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8732(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8733(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8734(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8735(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8736(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8737(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8738(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8739(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8740(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8741(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8742(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8743(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8744(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8745(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8746(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8747(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8748(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8749(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8750(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8751(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8752(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8753(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8754(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8755(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8756(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8757(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8758(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_created_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8759(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8760(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8761(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8762(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8763(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8764(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8765(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8766(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8767(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8768(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8769(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8770(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8771(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8772(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8773(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8774(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8775(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8776(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8777(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8778(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_quantity_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8779(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8780(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8781(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8782(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8783(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8784(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8785(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8786(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8787(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8788(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8789(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8790(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8791(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8792(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8793(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8794(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8795(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8796(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8797(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8798(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_item_id_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8799(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8800(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8801(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8802(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8803(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8804(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8805(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8806(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8807(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8808(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8809(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8810(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8811(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8812(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8813(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8814(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8815(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8816(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8817(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8818(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_character_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8819(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8820(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8821(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8822(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8823(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8824(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8825(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8826(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8827(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8828(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8829(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8830(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8831(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8832(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8833(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8834(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8835(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8836(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8837(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8838(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8839(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8840(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8841(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8842(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8843(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8844(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8845(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8846(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8847(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8848(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8849(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8850(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8851(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8852(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8853(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8854(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8855(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8856(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8857(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8858(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8859(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8860(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8861(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8862(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8863(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8864(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8865(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8866(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8867(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8868(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8869(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8870(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8871(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8872(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8873(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8874(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8875(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8876(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8877(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8878(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline results user_inventory_orm::select_all_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8879(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return result;
    }

    return result;
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8880(?, ?)");
        conn->execute(stmt.bind(s_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8881(?, ?)");
        conn->execute(stmt.bind(s_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8882(?, ?)");
        conn->execute(stmt.bind(s_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8883(?, ?)");
        conn->execute(stmt.bind(s_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8884(?, ?)");
        conn->execute(stmt.bind(s_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8885(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8886(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8887(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8888(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8889(?, ?)");
        conn->execute(stmt.bind(s_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8890(?, ?)");
        conn->execute(stmt.bind(s_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8891(?, ?)");
        conn->execute(stmt.bind(s_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8892(?, ?)");
        conn->execute(stmt.bind(s_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8893(?, ?)");
        conn->execute(stmt.bind(s_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8894(?, ?)");
        conn->execute(stmt.bind(s_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8895(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8896(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8897(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8898(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8899(?, ?)");
        conn->execute(stmt.bind(s_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8900(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8901(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8902(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8903(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8904(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8905(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8906(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8907(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8908(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8909(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8910(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8911(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8912(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8913(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8914(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8915(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8916(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8917(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8918(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8919(?, ?)");
        conn->execute(stmt.bind(s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8920(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8921(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8922(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8923(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8924(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8925(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8926(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8927(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8928(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8929(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8930(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8931(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8932(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8933(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8934(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8935(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8936(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8937(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8938(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8939(?, ?)");
        conn->execute(stmt.bind(s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8940(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8941(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8942(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8943(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8944(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8945(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8946(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8947(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8948(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8949(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8950(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8951(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8952(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8953(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8954(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8955(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8956(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8957(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8958(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8959(?, ?)");
        conn->execute(stmt.bind(s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_EQ_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8960(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LT_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8961(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LE_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8962(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GT_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8963(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GE_character_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8964(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8965(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8966(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8967(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8968(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8969(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_EQ_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8970(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LT_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8971(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LE_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8972(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GT_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8973(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GE_item_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8974(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8975(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8976(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8977(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8978(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8979(?, ?)");
        conn->execute(stmt.bind(s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_EQ_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8980(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LT_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8981(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LE_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8982(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GT_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8983(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GE_character_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8984(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8985(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8986(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8987(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8988(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8989(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_EQ_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8990(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LT_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8991(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LE_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8992(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GT_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8993(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GE_item_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8994(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8995(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8996(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8997(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8998(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_8999(?, ?)");
        conn->execute(stmt.bind(s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9000(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9001(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9002(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9003(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9004(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9005(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9006(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9007(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9008(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9009(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9010(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9011(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9012(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9013(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9014(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9015(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9016(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9017(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9018(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9019(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9020(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9021(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9022(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9023(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9024(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9025(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9026(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9027(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9028(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9029(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9030(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9031(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9032(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9033(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9034(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9035(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9036(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9037(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9038(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9039(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9040(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9041(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9042(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9043(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9044(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9045(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9046(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9047(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9048(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9049(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9050(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9051(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9052(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9053(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9054(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9055(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9056(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9057(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9058(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9059(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9060(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9061(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9062(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9063(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9064(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9065(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9066(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9067(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9068(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9069(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9070(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9071(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9072(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9073(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9074(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9075(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9076(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9077(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9078(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9079(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9080(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9081(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9082(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9083(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9084(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9085(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9086(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9087(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9088(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9089(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9090(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9091(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9092(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9093(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9094(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9095(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9096(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9097(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9098(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9099(?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9100(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9101(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9102(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9103(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9104(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9105(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9106(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9107(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9108(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9109(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9110(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9111(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9112(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9113(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9114(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9115(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9116(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9117(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9118(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9119(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9120(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9121(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9122(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9123(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9124(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9125(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9126(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9127(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9128(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9129(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9130(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9131(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9132(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9133(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9134(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9135(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9136(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9137(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9138(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9139(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9140(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9141(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9142(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9143(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9144(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9145(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9146(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9147(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9148(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9149(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9150(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9151(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9152(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9153(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9154(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9155(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9156(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9157(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9158(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9159(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9160(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9161(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9162(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9163(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9164(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9165(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9166(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9167(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9168(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9169(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9170(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9171(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9172(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9173(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9174(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9175(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9176(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9177(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9178(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9179(?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9180(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9181(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9182(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9183(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9184(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9185(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9186(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9187(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9188(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9189(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9190(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9191(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9192(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9193(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9194(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9195(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9196(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9197(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9198(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9199(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9200(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9201(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9202(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9203(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9204(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9205(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9206(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9207(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9208(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9209(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9210(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9211(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9212(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9213(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9214(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9215(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9216(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9217(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9218(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9219(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9220(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9221(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9222(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9223(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9224(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9225(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9226(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9227(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9228(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9229(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9230(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9231(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9232(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9233(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9234(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9235(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9236(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9237(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9238(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9239(?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9240(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9241(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9242(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9243(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9244(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9245(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9246(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9247(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9248(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9249(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9250(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9251(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9252(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9253(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9254(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9255(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9256(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9257(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9258(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9259(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9260(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9261(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9262(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9263(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9264(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9265(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9266(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9267(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9268(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9269(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9270(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9271(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9272(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9273(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9274(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9275(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9276(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9277(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9278(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9279(?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9280(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9281(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9282(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9283(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9284(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9285(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9286(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9287(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9288(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9289(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9290(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9291(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9292(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9293(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9294(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9295(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9296(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9297(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9298(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9299(?, ?, ?)");
        conn->execute(stmt.bind(s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9300(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9301(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9302(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9303(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9304(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9305(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9306(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9307(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9308(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9309(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9310(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9311(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9312(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9313(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9314(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9315(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9316(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9317(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9318(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9319(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9320(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9321(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9322(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9323(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9324(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9325(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9326(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9327(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9328(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9329(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9330(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9331(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9332(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9333(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9334(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9335(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9336(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9337(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9338(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9339(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9340(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9341(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9342(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9343(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9344(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9345(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9346(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9347(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9348(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9349(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9350(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9351(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9352(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9353(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9354(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9355(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9356(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9357(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9358(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9359(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9360(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9361(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9362(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9363(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9364(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9365(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9366(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9367(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9368(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9369(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9370(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9371(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9372(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9373(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9374(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9375(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9376(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9377(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9378(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9379(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9380(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9381(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9382(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9383(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9384(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9385(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9386(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9387(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9388(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9389(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9390(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9391(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9392(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9393(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9394(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9395(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9396(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9397(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9398(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9399(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9400(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9401(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9402(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9403(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9404(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9405(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9406(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9407(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9408(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9409(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9410(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9411(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9412(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9413(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9414(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9415(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9416(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9417(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9418(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9419(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9420(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9421(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9422(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9423(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9424(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9425(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9426(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9427(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9428(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9429(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9430(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9431(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9432(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9433(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9434(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9435(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9436(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9437(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9438(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9439(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9440(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9441(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9442(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9443(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9444(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9445(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9446(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9447(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9448(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9449(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9450(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9451(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9452(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9453(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9454(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9455(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9456(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9457(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9458(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9459(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9460(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9461(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9462(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9463(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9464(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9465(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9466(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9467(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9468(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9469(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9470(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9471(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9472(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9473(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9474(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9475(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9476(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9477(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9478(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9479(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9480(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9481(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9482(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9483(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9484(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9485(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9486(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9487(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9488(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9489(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9490(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9491(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9492(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9493(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9494(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9495(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9496(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9497(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9498(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9499(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9500(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9501(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9502(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9503(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9504(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9505(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9506(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9507(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9508(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9509(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9510(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9511(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9512(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9513(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9514(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9515(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9516(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9517(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9518(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9519(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9520(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9521(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9522(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9523(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9524(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9525(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9526(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9527(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9528(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9529(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9530(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9531(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9532(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9533(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9534(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9535(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9536(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9537(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9538(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9539(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9540(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9541(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9542(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9543(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9544(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9545(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9546(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9547(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9548(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9549(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9550(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9551(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9552(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9553(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9554(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9555(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9556(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9557(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9558(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9559(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9560(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9561(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9562(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9563(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9564(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9565(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9566(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9567(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9568(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9569(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9570(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9571(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9572(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9573(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9574(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9575(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9576(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9577(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9578(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9579(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9580(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9581(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9582(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9583(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9584(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9585(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9586(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9587(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9588(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9589(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9590(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9591(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9592(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9593(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9594(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9595(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9596(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9597(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9598(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9599(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9600(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9601(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9602(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9603(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9604(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9605(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9606(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9607(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9608(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9609(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9610(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9611(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9612(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9613(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9614(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9615(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9616(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9617(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9618(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9619(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9620(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9621(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9622(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9623(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9624(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9625(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9626(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9627(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9628(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9629(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9630(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9631(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9632(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9633(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9634(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9635(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9636(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9637(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9638(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9639(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9640(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9641(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9642(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9643(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9644(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9645(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9646(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9647(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9648(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9649(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9650(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9651(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9652(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9653(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9654(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9655(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9656(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9657(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9658(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9659(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9660(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9661(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9662(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9663(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9664(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9665(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9666(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9667(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9668(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9669(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9670(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9671(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9672(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9673(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9674(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9675(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9676(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9677(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9678(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9679(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9680(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9681(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9682(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9683(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9684(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9685(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9686(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9687(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9688(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9689(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9690(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9691(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9692(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9693(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9694(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9695(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9696(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9697(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9698(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9699(?, ?, ?, ?)");
        conn->execute(stmt.bind(s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9700(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9701(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9702(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9703(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9704(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9705(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9706(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9707(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9708(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9709(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9710(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9711(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9712(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9713(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9714(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9715(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9716(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9717(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9718(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9719(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9720(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9721(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9722(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9723(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9724(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9725(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9726(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9727(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9728(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9729(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9730(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9731(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9732(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9733(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9734(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9735(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9736(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9737(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9738(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9739(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9740(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9741(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9742(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9743(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9744(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9745(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9746(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9747(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9748(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9749(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9750(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9751(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9752(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9753(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9754(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9755(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9756(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9757(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9758(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9759(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9760(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9761(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9762(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9763(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9764(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9765(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9766(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9767(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9768(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9769(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9770(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9771(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9772(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9773(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9774(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9775(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9776(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9777(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9778(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9779(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9780(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9781(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9782(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9783(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9784(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9785(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9786(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9787(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9788(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9789(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9790(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9791(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9792(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9793(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9794(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9795(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9796(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9797(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9798(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9799(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9800(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9801(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9802(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9803(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9804(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9805(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9806(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9807(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9808(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9809(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9810(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9811(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9812(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9813(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9814(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9815(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9816(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9817(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9818(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9819(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9820(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9821(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9822(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9823(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9824(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9825(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9826(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9827(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9828(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9829(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9830(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9831(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9832(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9833(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9834(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9835(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9836(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9837(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9838(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9839(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9840(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9841(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9842(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9843(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9844(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9845(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9846(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9847(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9848(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9849(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9850(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9851(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9852(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9853(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9854(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9855(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9856(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9857(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9858(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9859(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9860(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9861(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9862(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9863(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9864(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9865(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9866(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9867(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9868(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9869(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9870(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9871(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9872(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9873(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9874(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9875(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9876(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9877(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9878(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9879(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9880(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9881(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9882(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9883(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9884(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9885(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9886(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9887(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9888(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9889(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9890(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9891(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9892(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9893(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9894(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9895(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9896(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9897(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9898(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9899(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9900(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9901(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9902(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9903(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9904(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9905(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9906(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9907(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9908(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9909(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9910(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9911(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9912(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9913(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9914(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9915(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9916(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9917(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9918(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9919(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9920(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9921(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9922(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9923(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9924(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9925(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9926(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9927(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9928(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9929(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9930(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9931(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9932(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9933(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9934(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9935(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9936(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9937(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9938(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9939(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9940(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9941(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9942(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9943(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9944(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9945(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9946(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9947(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9948(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9949(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9950(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9951(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9952(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9953(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9954(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9955(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9956(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9957(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9958(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9959(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9960(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9961(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9962(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9963(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9964(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9965(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9966(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9967(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9968(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9969(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9970(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9971(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9972(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9973(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9974(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9975(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9976(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9977(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9978(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9979(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9980(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9981(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9982(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9983(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9984(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9985(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9986(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9987(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9988(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9989(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9990(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9991(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9992(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9993(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9994(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9995(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9996(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9997(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9998(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_9999(?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10000(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10001(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10002(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10003(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10004(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10005(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10006(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10007(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10008(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10009(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10010(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10011(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10012(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10013(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10014(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10015(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10016(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10017(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10018(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10019(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10020(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10021(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10022(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10023(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10024(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10025(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10026(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10027(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10028(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10029(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10030(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10031(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10032(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10033(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10034(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10035(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10036(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10037(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10038(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10039(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10040(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10041(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10042(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10043(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10044(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10045(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10046(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10047(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10048(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10049(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10050(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10051(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10052(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10053(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10054(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10055(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10056(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10057(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10058(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10059(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10060(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10061(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10062(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10063(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10064(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10065(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10066(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10067(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10068(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10069(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10070(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10071(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10072(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10073(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10074(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10075(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10076(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10077(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10078(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10079(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10080(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10081(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10082(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10083(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10084(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10085(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10086(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10087(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10088(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10089(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10090(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10091(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10092(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10093(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10094(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10095(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10096(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10097(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10098(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10099(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10100(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10101(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10102(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10103(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10104(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10105(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10106(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10107(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10108(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10109(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10110(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10111(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10112(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10113(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10114(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10115(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10116(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10117(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10118(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10119(?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10120(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10121(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10122(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10123(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_character_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10124(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10125(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10126(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10127(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10128(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_created_at(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10129(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10130(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10131(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10132(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10133(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_item_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10134(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_EQ_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10135(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10136(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_LE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10137(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GT_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10138(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::update_user_inventory_set_id_N_character_id_N_item_id_N_quantity_N_created_at_N_updated_at_where_GE_id(tcp_connection* conn, const int32_t& s_id, const int32_t& s_character_id, const int32_t& s_item_id, const int32_t& s_quantity, const datetime& s_created_at, const datetime& s_updated_at, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10139(?, ?, ?, ?, ?, ?, ?)");
        conn->execute(stmt.bind(s_id, s_character_id, s_item_id, s_quantity, s_created_at, s_updated_at, w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_EQ_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10140(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10141(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10142(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GT_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10143(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GE_character_id(tcp_connection* conn, const int32_t& w_character_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10144(?)");
        conn->execute(stmt.bind(w_character_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_EQ_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10145(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10146(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10147(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GT_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10148(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GE_created_at(tcp_connection* conn, const datetime& w_created_at)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10149(?)");
        conn->execute(stmt.bind(w_created_at), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_EQ_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10150(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10151(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10152(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GT_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10153(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GE_item_id(tcp_connection* conn, const int32_t& w_item_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10154(?)");
        conn->execute(stmt.bind(w_item_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_EQ_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10155(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10156(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_LE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10157(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GT_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10158(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}

    
inline int user_inventory_orm::delete_from_user_inventory_where_GE_id(tcp_connection* conn, const int32_t& w_id)
{
    results result;
    try
    {
        auto stmt = conn->prepare_statement("CALL sp_10159(?)");
        conn->execute(stmt.bind(w_id), result);
    }
    catch (const error_with_diagnostics& e)
    {
        std::cerr << "Error in sp_insert: " << e.what() << std::endl;
        return false;
    }

    return result.affected_rows();
}



} // namespace ORM
DISABLE_WARNING_POP
